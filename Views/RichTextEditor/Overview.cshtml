@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section">
        <div class="control-wrapper">
            <ejs-richtexteditor id="allToolsRTE" value="@ViewBag.rteValue" showCharCount="true" actionBegin="actionBeginHandler" actionComplete="actionCompleteHandler" beforeQuickToolbarOpen="quickToolbarOpenHandler" quickToolbarClose="quickToolbarClosehandler" created="created" enableTabKey="true" enableXhtml="true"
                placeholder="Type something or use @@ to tag a user..." >
                <e-richtexteditor-toolbarsettings items="@ViewBag.tools" ></e-richtexteditor-toolbarsettings>
                <e-richtexteditor-quicktoolbarsettings table="@ViewBag.table" showOnRightClick="true"></e-richtexteditor-quicktoolbarsettings>
                <e-richtexteditor-filemanagersettings enable="true" path="/Pictures/Food" ajaxSettings="@ViewBag.ajaxSettings"></e-richtexteditor-filemanagersettings>
                <e-richtexteditor-insertimagesettings saveUrl="@ViewBag.saveUrl" removeUrl="@ViewBag.removeUrl" path="@ViewBag.path"></e-richtexteditor-insertimagesettings>
            </ejs-richtexteditor>

            <ejs-mention id="editorMention" dataSource="@ViewBag.mentionData" allowSpaces="true" popupHeight="200px" popupWidth="250px" sortOrder="Ascending"
                target="#allToolsRTE_rte-edit-view" created="mentionCreated" 
                itemTemplate="<div class='editor-mention-item-template'>
                    <div class='em-header'>
                        <div class='em-avatar' style='background-color: ${BgColor}; color: ${Color};'>
                            <div class='em-initial'>${Initial}</div>
                        </div>
                    </div>
                    <div class='em-content'>
                        <div class='em-name'>${Name}</div>
                        <div class='em-email'>${Email}</div>
                    </div>
                </div>" 
                displayTemplate="<a href='mailto:${Email}' title='${Email}'>@@${Name}</a>">
                <e-mention-fields text="Name"></e-mention-fields>
            </ejs-mention>

            <ejs-uploader id="rteCustomWordUpload" allowedExtensions=".docx,.doc,.rtf" success="onUploadSuccess" asyncsettings="@ViewBag.UploaderAjaxSettings" created="uploaderCreated"
                          htmlAttributes="@ViewBag.htmlAttribute">
            </ejs-uploader>
        </div>
    </div>
    <link href="~/css/richtexteditor/codemirror.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
    <style>
        .e-rte-code-mirror-enabled .rte-code-mirror {
            display: block !important; /* To show the custom source code view. */
        }
        .e-rte-code-mirror-enabled .e-rte-content {
            display: none !important;  /* To hide the editor area when custom source code enabled. */
        }
        /** Mention template styles **/
        .editor-mention-item-template {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: row;
            align-items: center;
        }
        .em-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        .em-avatar {
            width: 32px;
            height: 32px;
            text-align: center;
            border-radius: 50%;
            font-size: 12px;
            font-weight: 500;
            text-indent: 0px;
            line-height: 13px;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .em-name {
            color: rgb(16, 24, 40);
            font-size: 14px;
            font-weight: 400;
            line-height: 14px;
            margin-bottom: 5px;
        }
        .em-email {
            color: gray;
            font-size: 12px;
            font-weight: 400;
            line-height: 14px;
        }
        #allToolsRTE_rte-edit-view_options li {
            padding: 10px;
            height: 60px;
        }
        body[class*="-dark"] .em-name {
            color: #fff !important;
        }
        /** custom source code styles **/
        body[class*="-dark"] .rte-code-mirror .cm-tag {
            color: #00ff00;
        }
        body[class*="-dark"] .rte-code-mirror .cm-string {
            color: blue;
        }
        body[class*="-dark"] .rte-code-mirror .cm-attribute {
            color: #f00;
        }
        body[class*="-dark"] .rte-code-mirror .CodeMirror-gutters, body[class*="-dark"] .rte-code-mirror .CodeMirror{
            background-color: transparent;
            color: #fff;
        }
        .sb-header {
            z-index: 100;
        }
        .sb-content.e-view.hide-header {
            top: 0 !important;
        }
        .sb-header.e-view.hide-header {
            display: none;
        }
    </style>
    <script type="text/javascript">
        var rteObj, myCodeMirror, mentionObj, uploaderObj;
        var hostUrl = 'https://ej2services.syncfusion.com/production/web-services/';
        function created() {
            rteObj = this;
            var importDoc = rteObj.element.querySelector('#custom_tbarbtn_1');
            importDoc.onclick = function (e) {
                uploaderObj.element.click();
            }
            var exportDoc = rteObj.element.querySelector('#custom_tbarbtn_2');
            exportDoc.onclick = function (e) {
                const rteHtmlData = rteObj.getHtml();
                // Create the HTML elements programmatically
                var htmlElement = document.createElement("html");
                var headElement = document.createElement("head");
                var bodyElement = document.createElement("body");
                // Set rteHtmlData as the innerHTML of the body element
                bodyElement.innerHTML = rteHtmlData;
                // Append head and body elements to the html element
                htmlElement.appendChild(headElement);
                htmlElement.appendChild(bodyElement);
                // Serialize the HTML element to a string
                var htmlString = new XMLSerializer().serializeToString(htmlElement);
                fetch(hostUrl + 'api/RichTextEditor/ExportToDocx', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ html: htmlString }) // Wrap HTML in a JSON object
                }).then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const filename = 'Result.docx';
                    // Create a Blob from the response and initiate the download
                    return response.blob().then(blob => ({ blob, filename }));
                }).then(({ blob, filename }) => {
                    const url = window.URL.createObjectURL(blob); // Create a Blob URL from the response and initiate the download
                    const a = document.createElement('a');        // Create an anchor element
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);                 // Append the anchor element to the document
                    a.click();                                    // Trigger a click on the anchor element to initiate the download
                    document.body.removeChild(a);                 // Remove the anchor element from the document
                    window.URL.revokeObjectURL(url);               // Revoke the object URL to free up resources
                }).catch(error => {
                    console.error('Fetch error:', error);
                });
            }
            var exportPdf = rteObj.element.querySelector('#custom_tbarbtn_3');
            exportPdf.onclick = function (e) {
                const rteHtmlData = rteObj.getHtml();
                // Create the HTML elements programmatically
                var htmlElement = document.createElement("html");
                var headElement = document.createElement("head");
                var bodyElement = document.createElement("body");
                // Set rteHtmlData as the innerHTML of the body element
                bodyElement.innerHTML = rteHtmlData;
                // Append head and body elements to the html element
                htmlElement.appendChild(headElement);
                htmlElement.appendChild(bodyElement);
                // Serialize the HTML element to a string
                var htmlString = new XMLSerializer().serializeToString(htmlElement);
                fetch(hostUrl + 'api/RichTextEditor/ExportToPdf', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ html: htmlString }) // Wrap HTML in a JSON object
                }).then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.blob();
                }).then(blob => {
                    const url = window.URL.createObjectURL(blob);  // Create a Blob URL from the response and initiate the download
                    const a = document.createElement('a');         // Create an anchor element
                    a.href = url;
                    a.download = 'Sample.pdf';
                    document.body.appendChild(a);                  // Append the anchor element to the document
                    a.click();                                     // Trigger a click on the anchor element to initiate the download
                    document.body.removeChild(a);                  // Remove the anchor element from the document
                    window.URL.revokeObjectURL(url);               // Revoke the object URL to free up resources
                }).catch(error => {
                    console.error('Fetch error:', error);
                });
            }
        }
        function mentionCreated() {
            mentionObj = this;
        }
        function uploaderCreated() {
            uploaderObj = this;
        }
        function mirrorConversion(e) {
            const id = rteObj.getID() + 'mirror-view';
            const rteContainer = rteObj.element.querySelector('.e-rte-container');
            let mirrorView = rteObj.element.querySelector('#' + id);
            if (e.targetItem === 'Preview') {
                rteObj.value = myCodeMirror.getValue();
                rteObj.dataBind();
                rteContainer.classList.remove('e-rte-code-mirror-enabled');
                rteObj.focusIn();
            } else {
                rteContainer.classList.add('e-rte-code-mirror-enabled');
                rteContainer.classList.remove('e-source-code-enabled');
                if (!mirrorView) {
                    mirrorView = ej.base.createElement('div', { className: 'rte-code-mirror', id: id, styles: 'display: none;' });
                    rteContainer.appendChild(mirrorView);
                    renderCodeMirror(mirrorView, rteObj.value === null ? '' : rteObj.value);
                }
                else {
                    myCodeMirror.setValue(rteObj.value === null ? '' : rteObj.value);
                }
                myCodeMirror.focus();
            }
        }
        function renderCodeMirror(mirrorView, content) {
            myCodeMirror = CodeMirror(mirrorView, {
                value: content,
                lineNumbers: true,
                mode: 'text/html',
                lineWrapping: true,
            });
        }
        function handleFullScreen(e) {
            var sbCntEle = document.querySelector('.sb-content.e-view');
            var sbHdrEle = document.querySelector('.sb-header.e-view');
            var leftBar;
            var transformElement;
            if (ej.base.Browser.isDevice) {
                leftBar = document.querySelector('#right-sidebar');
                transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');
            }
            else {
                leftBar = document.querySelector('.sb-left-pane');
                transformElement = document.querySelector('#right-pane');
            }
            if (e.targetItem === 'Maximize') {
                if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                    ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
                }
                ej.base.addClass([leftBar], ['e-close']);
                ej.base.removeClass([leftBar], ['e-open']);
                if (!ej.base.Browser.isDevice) {
                    transformElement.style.marginLeft = '0px';
                }
                transformElement.style.transform = 'inherit';
                transformElement.style.zIndex = 1001;
            }
            else if (e.targetItem === 'Minimize') {
                if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                    ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
                }
                ej.base.removeClass([leftBar], ['e-close']);
                if (!ej.base.Browser.isDevice) {
                    ej.base.addClass([leftBar], ['e-open']);
                    transformElement.style.marginLeft = leftBar.offsetWidth + 'px';
                }
                transformElement.style.transform = 'translateX(0px)';
                transformElement.style.zIndex = "";
            }
        }
        function actionBeginHandler(e) {
            if (e.requestType === 'EnterAction' && mentionObj.element.classList.contains('e-popup-open')) {
                e.cancel = true;
            }
            if (e.requestType === 'Maximize' || e.requestType === 'Minimize') {
                handleFullScreen(e);
            }
        }
        function actionCompleteHandler(e) {
            if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
                mirrorConversion(e);
            }
            if (e.requestType === 'SourceCode') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_1').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.add('e-overlay');
            } else if (e.requestType === 'Preview') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_1').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.remove('e-overlay');
            }
        }
        function quickToolbarOpenHandler(e) {
            if (!ej.base.isNullOrUndefined(e.targetElement) && e.targetElement.nodeName === 'IMG') {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_1').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.add('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.add('e-overlay');
            }
        }
        function quickToolbarClosehandler(e) {
            if (!ej.base.isNullOrUndefined(args.element) && args.element.classList.contains('e-rte-image-popup')) {
                rteObj.getToolbar().querySelector('#custom_tbarbtn_1').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_2').parentElement.classList.remove('e-overlay');
                rteObj.getToolbar().querySelector('#custom_tbarbtn_3').parentElement.classList.remove('e-overlay');
            }
        }
        function onUploadSuccess(args) {
            rteObj.executeCommand('insertHTML', args.e.currentTarget.response, { undo: true });
        }
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Overview in ASP.NET Core Rich Text Editor control. Explore here for more details."/>
                }

@*custom code end*@

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the full features of Rich Text Editor that includes all the tools and functionalities.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>This sample used <code>Code mirror</code> plugins helps to highlight the HTML content and when changes happens in code view, the same has been reflected in preview mode. </p>
        <p>The quick toolbar provides a convenient way to customize Image, Video, Audio, Table, and Link elements. Simply right-click on the desired element, utilizing the <code>ShowOnRightClick</code> property, and the quick toolbar will appear, providing an easy way for customization.</p>
        <p>The editor’s toolbar contains commands to format the content. The toolbar consists of:</p>
        <ul>
            <li><code>Lists</code> - NumberFormat list and BulletFormat list types.</li>
            <li><code>Links</code> - A hyperlink can be inserted into the editor for quick access to related information.</li>
            <li><code>Image</code> - Inserts and manages images.</li>
            <li><code>Table</code> - Inserts and manages Tables.</li>
            <li><code>Alignment</code> - Aligns the content with left, center, and right margins.</li>
            <li><code>Undo/Redo</code> - Allows undo/redo operations.</li>
            <li><code>Indent/ Outdent</code> - Increases/decreases the indent level of the content.</li>
            <li><code>Font</code> - Able to do styling on text like font family, size, fore color and background color.</li>
            <li><code>Lower / Upper case</code> – Changes the casing of the selected text.</li>
            <li><code>SubScript / SuperScript</code> - Makes the selected text as subscript (lower)/superscript(upper).</li>
            <li><code>FullScreen</code> - Stretches the editor to the maximum width and height of the browser window.</li>
            <li><code>Format</code> – Formats the sentence in different ways such as heading level, quotation, and code snippet</li>
            <li><code>Styles</code> – Allows you to apply inline styles to the selected content like bold, italic, and more.</li>
            <li><code>Insert Code</code> - Allows you to apply code format to the selected parent nodes. In the above sample, the style for the code format ('pre' tag) is applied by adding the background color.</li>
            <li><code>Insert Emoticon</code> - Inserts the emoticon to the editor</li>
            <li><code>Audio</code> - Inserts and manages audios.</li>
            <li><code>Video</code> - Inserts and manages videos.</li>
            <li><code>Format Painter</code> - The Format Painter feature allows you to copy the formats and apply them to content without formatting thus saving time to reformat the content.</li>
        </ul>
    </div>
}
@section Title{
                    <title>ASP.NET Core Rich Text Editor Overview Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Overview in ASP.NET Core Rich Text Editor Control</h1>
                }