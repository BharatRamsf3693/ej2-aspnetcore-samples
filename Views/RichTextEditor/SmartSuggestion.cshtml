@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns;
@using EJ2CoreSampleBrowser_NET6.Models
@{
    var formatList = new FormatData().FormatList();
    char nameMentionChar = '/';

}
@section ControlsSection {
    <div class="control-section">
        <div class="control-wrapper">
            <ejs-richtexteditor id="MentionInlineFormat" created="created" placeholder="Type '/' and choose format" actionBegin="actionBegin">
                <e-richtexteditor-toolbarsettings items="@ViewBag.items"></e-richtexteditor-toolbarsettings>
            </ejs-richtexteditor>
        </div>
    </div>
    <ejs-mention id="mention" target="#MentionInlineFormat_rte-edit-view" created="onMentionCreate"  mentionChar="@nameMentionChar" beforeOpen="beforeOpen" dataSource="@formatList" popupHeight="290px" popupWidth="320px" allowSpaces="true" select="applyCommand" itemTemplate="<table class='format-table'><tr><td><span class='${Icon}' id='icons'></span></td><td><span class='font'>${FormatName}</span> <span class='description'>${Description}</span></td></tr></table>">
          <e-mention-fields text="FormatName" groupBy="FormatType"></e-mention-fields>                                                                                                                                                                                      
    </ejs-mention>
    <ejs-dialog id="emojiDialog" open="onOpen" visible="false" header='Insert Emoticons' created="onDialogCreate" zIndex="1000" isModal="true" overlayClick="dialogOverlay">
        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="ViewBag.insertButton" click="onInsert"></e-dialog-dialogbutton>
            <e-dialog-dialogbutton buttonModel="ViewBag.cancelButton" click="dialogOverlay"></e-dialog-dialogbutton>
        </e-dialog-buttons>
        <e-content-template>
                <div id="emojiDialog">
                    <div id="rteEmoticons-smiley">
                        <div class="char_block" title="Grinning face">&#128512;</div>
                        <div class="char_block" title="Grinning face with smiling eyes">&#128513;</div>
                        <div class="char_block" title="Face with tears of joy">&#128514;</div>
                        <div class="char_block" title="Smiling face with open mouth">&#128515;</div>
                        <div class="char_block" title="Smiling face with open mouth and smiling eyes">&#128516;</div>
                        <div class="char_block" title="Smiling face with open mouth and cold sweat">&#128517;</div>
                        <div class="char_block" title="Smiling face with open mouth and tightly-closed eyes">&#128518;</div>
                        <div class="char_block" title="Smiling face with halo">&#128519;</div>
                        <div class="char_block" title="Smiling face with horns">&#128520;</div>
                        <div class="char_block" title="Winking face">&#128521;</div>
                        <div class="char_block" title="Smiling face with smiling eyes">&#128522;</div>
                        <div class="char_block" title="Face savouring delicious food">&#128523;</div>
                        <div class="char_block" title="Relieved face">&#128524;</div>
                        <div class="char_block" title="Smiling face with heart-shaped eyes">&#128525;</div>
                        <div class="char_block" title="Smiling face with sunglasses">&#128526;</div>
                        <div class="char_block" title="Smirking face">&#128527;</div>
                        <div class="char_block" title="Neutral face">&#128528;</div>
                        <div class="char_block" title="Expressionless face">&#128529;</div>
                        <div class="char_block" title="Unamused face">&#128530;</div>
                        <div class="char_block" title="Face with cold sweat">&#128531;</div>
                        <div class="char_block" title="Pensive face">&#128532;</div>
                        <div class="char_block" title="Confused face">&#128533;</div>
                        <div class="char_block" title="Confounded face">&#128534;</div>
                        <div class="char_block" title="Kissing face">&#128535;</div>
                        <div class="char_block" title="Face throwing a kiss">&#128536;</div>
                        <div class="char_block" title="Kissing face with smiling eyes">&#128537;</div>
                        <div class="char_block" title="Kissing face with closed eyes">&#128538;</div>
                        <div class="char_block" title="Face with stuck-out tongue">&#128539;</div>
                        <div class="char_block" title="Face with stuck-out tongue and winking eye">&#128540;</div>
                        <div class="char_block" title="Face with stuck-out tongue and tightly-closed eyes">&#128541;</div>
                        <div class="char_block" title="Disappointed face">&#128542;</div>
                        <div class="char_block" title="Worried face">&#128543;</div>
                        <div class="char_block" title="Angry face">&#128544;</div>
                        <div class="char_block" title="Pouting face">&#128545;</div>
                        <div class="char_block" title="Crying face">&#128546;</div>
                        <div class="char_block" title="Persevering face">&#128547;</div>
                        <div class="char_block" title="Face with look    of triumph">&#128548;</div>
                        <div class="char_block" title="Disappointed but relieved face">&#128549;</div>
                        <div class="char_block" title="Frowning face with open mouth">&#128550;</div>
                        <div class="char_block" title="Anguished face   ">&#128551;</div>
                        <div class="char_block" title="Monkey Face">&#128053;</div>
                        <div class="char_block" title="Monkey">&#128018;</div>
                        <div class="char_block" title="Gorilla">&#129421;</div>
                        <div class="char_block" title="Dog Face">&#128054;</div>
                        <div class="char_block" title="Dog">&#128021;</div>
                        <div class="char_block" title="Poodle">&#128041;</div>
                        <div class="char_block" title="Wolf Face">&#128058;</div>
                        <div class="char_block" title="Fox Face">&#129418;</div>
                        <div class="char_block" title="Cat Face">&#128049;</div>
                        <div class="char_block" title="Cat">&#128008;</div>
                        <div class="char_block" title="Lion Face">&#129409;</div>
                        <div class="char_block" title="Tiger Face">&#128047;</div>
                        <div class="char_block" title="Tiger">&#128005;</div>
                        <div class="char_block" title="Leopard">&#128006;</div>
                        <div class="char_block" title="Horse Face">&#128052;</div>
                        <div class="char_block" title="Horse">&#128014;</div>
                        <div class="char_block" title="Unicorn Face">&#129412;</div>
                        <div class="char_block" title="Deer">&#129420;</div>
                        <div class="char_block" title="Cow Face">&#128046;</div>
                        <div class="char_block" title="Ox">&#128002;</div>
                        <div class="char_block" title="Water Buffalo">&#128003;</div>
                        <div class="char_block" title="Cow">&#128004;</div>
                        <div class="char_block" title="Pig Face">&#128055;</div>
                        <div class="char_block" title="Pig">&#128022;</div>
                        <div class="char_block" title="Boar">&#128023;</div>
                        <div class="char_block" title="Pig Nose">&#128061;</div>
                        <div class="char_block" title="Ram">&#128015;</div>
                        <div class="char_block" title="Ewe">&#128017;</div>
                        <div class="char_block" title="Goat">&#128016;</div>
                        <div class="char_block" title="Camel">&#128042;</div>   
                    </div>
                </div>        
        </e-content-template>
    </ejs-dialog>

    <style>
        #emojiDialog{
            max-height: 450px !important;
        }

        .e-icons.block-view:before{
            content: open-quote;
            font-size: 30px;
            line-height: 20px;
        }
        .e-icons.e-text:before{
            content: 'T';
        }
        .e-icons.h1-view:before{
            content: 'H1';
        }
        .e-icons.h2-view:before{
            content: 'H2';
        }
        .e-icons.h3-view:before{
            content: 'H3';
        }
        .e-icons.h4-view:before{
            content: 'H4';
        }
        .e-icons.emoji:before{
            content: '🙂';
        }

        .format-table .description {
            display: block;
            line-height: 20px;
            font-size: 12px;
            padding: 1px 0px 5px 0px;
        }
        .format-table .font {
            font-size: 16px;
            display: block;
            line-height: 20px;
            padding: 5px 0px 1px 0px;
        }
        .format-table #icons{
            padding: 15px 15px;
            display: inline-block; 
            width: 55px; 
            font-size:20px;
            line-height: 0px;
        }

        .e-icons.e-image, .e-icons.e-audio, .e-icons.e-table, .e-icons.e-video,
        .e-icons.e-list-unordered, .e-icons.e-list-ordered{
            line-height: 10px !important;
        }

        #MentionInlineFormat .e-mention-chip{
            cursor: pointer;
        }
        #emojiDialog #special_char,
        #emojiDialog .char_block {
            display: inline-block;
        }

        #rteEmoticons-smiley, #rteEmoticons-animal {
            padding: 15px 0 15px 15px;
        }

        #emojiDialog .char_block.e-active {
            outline: 1px solid #e3165b;
            border-color: #e3165b;
        }

        .material #emojiDialog .char_block.e-active {
            outline: 1px solid #e3165b;
            border-color: #e3165b;
        }

        .material-dark #emojiDialog .char_block.e-active {
            outline: 1px solid #56a4fd;
            border-color: #56a4fd;
        }

        .fabric #emojiDialog .char_block.e-active,
        .fabric-dark  #emojiDialog .char_block.e-active {
            outline: 1px solid #0078d6;
            border-color: #0078d6;
        }

        .bootstrap4 #emojiDialog .char_block.e-active {
            outline: 1px solid #007bff;
            border-color: #007bff;
        }
            
        .bootstrap #emojiDialog .char_block.e-active,
        .bootstrap-dark  #emojiDialog .char_block.e-active {
            outline: 1px solid #317ab9;
            border-color: #317ab9;
        }

        .highcontrast #emojiDialog .char_block.e-active {
            outline: 1px solid #ffd939;
            border-color: #ffd939;
        }

        .tailwind #emojiDialog .char_block.e-active {
            outline: 1px solid #3730a3;
            border-color: #3730a3;
        }

        .tailwind-dark #emojiDialog .char_block.e-active {
            outline: 1px solid #22d3ee;
            border-color: #22d3ee;
        }

        .bootstrap5 #emojiDialog .char_block.e-active,
        .bootstrap5-dark  #emojiDialog .char_block.e-active {
            outline: 1px solid #0D6EFD;
            border-color: #0D6EFD;
        }
        .fluent #emojiDialog .char_block.e-active,
        .fluent-dark #emojiDialog .char_block.e-active {
            outline: 1px solid #0078DE;
            border-color: #0078DE;
        }

        #emojiDialog .char_block {
            width: 30px;
            height: 30px;
            line-height: 30px;
            margin: 0 5px 5px 0;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #DDDDDD;
            font-size: 20px;
            cursor: pointer;
            user-select: none;
        }

        @@media (min-width: 320px) and (max-width: 480px) {
            #rteEmoticons-smiley, #rteEmoticons-animal {
                padding: 15px 0 15px 0px;
            }
        }
       
    </style>

    <script type="text/javascript">

        var rteObj, selection, ranges, dialogObj, mentionObj;
        var selection = new ej.richtexteditor.NodeSelection();

        function actionBegin(args) {
            if (args.requestType === 'EnterAction') {
                if (mentionObj.element.classList.contains('e-popup-open')) {
                    args.cancel = true;
                }
            }
        }

        function onMentionCreate() {
            mentionObj = this;
        }

        function onOpen() {
            var emojiElement = document.getElementById("rteEmoticons-smiley");
            if (!emojiElement.children[0].classList.contains('e-active')) {
                emojiElement.children[0].classList.add('e-active');
            }
        }

        function onDialogCreate() {
            dialogObj = this;
            dialogObj.element.style.maxHeight = '300px';
        }

        function beforeApplyFormat(isBlockFormat) {
            var range1 = rteObj.getRange();
            var node = rteObj.formatter.editorManager.nodeSelection.getNodeCollection(range1)[0];
            var blockNewLine = !(node.textContent.trim() == '/' && node.parentElement.innerHTML.replace(/&nbsp;|<br>/g, '').trim() == '/');
            var blockNode;
            var startNode = node;
            if (blockNewLine && isBlockFormat) {
                while (startNode != rteObj.inputElement) {
                    blockNode = startNode;
                    startNode = startNode.parentElement;
                }
            }
            rteObj.formatter.editorManager.nodeSelection.setSelectionText(document, node, node, range1.startOffset - 1, range1.endOffset);
            var range2 = rteObj.getRange();
            var node2 = rteObj.formatter.editorManager.nodeCutter.GetSpliceNode(range2, node);
            var previouNode = node2.previousSibling;
            node2.parentNode.removeChild(node2);
            if (blockNewLine && isBlockFormat) {
                var defaultTag = document.createElement('p');
                defaultTag.innerHTML = '</br>';
                blockNode.parentNode.insertBefore(defaultTag, blockNode.nextSibling);
                selection.setCursorPoint(document, blockNode.nextSibling, 0);
            } else if (previouNode) {
                selection.setCursorPoint(document, previouNode, previouNode.textContent.length);
            }
        }

        function onInsert() {
            var activeElement = dialogObj.element.querySelector('.char_block.e-active');
            if (activeElement) {
                if (rteObj.formatter.getUndoRedoStack().length === 0) {
                    rteObj.formatter.saveData();
                }
                beforeApplyFormat(false);
                var range = rteObj.getRange();
                selection.setCursorPoint(document, range.startContainer, range.startOffset);
                rteObj.executeCommand('insertText', activeElement.textContent);
                rteObj.formatter.saveData();
                rteObj.formatter.enableUndo(rteObj);
            }
            dialogOverlay();
        }

        function dialogOverlay() {
            var activeElement = dialogObj.element.querySelector('.char_block.e-active');
            if (activeElement) {
                activeElement.classList.remove('e-active');
            }
            dialogObj.hide();
        }

        function beforeOpen() {
            saveSelection = selection.save(selection.getRange(document), document);
        }

        function created() {
            rteObj = this;
            var dialogCtn = document.getElementById('emojiDialog');
            dialogCtn.onclick = function (e) {
                var target = e.target;
                var activeElement = dialogObj.element.querySelector('.char_block.e-active');
                if (target.classList.contains('char_block')) {
                    target.classList.add('e-active');
                    if (activeElement) {
                        activeElement.classList.remove('e-active');
                    }
                }
            };
        }

        function applyCommand(args) {
            args.cancel = true;
            rteObj.focusIn();
            saveSelection.restore();
            if (args.itemData.FormatType !== 'Inline') {
                beforeApplyFormat(true);
            }
            if (args.itemData.Command == 'OL') {
                rteObj.executeCommand('insertOrderedList');
            } else if (args.itemData.Command == 'UL') {
                rteObj.executeCommand('insertUnorderedList');
            } else if (args.itemData.Command == 'CreateTable') {
                mentionObj.hidePopup();
                rteObj.showDialog('InsertTable');
            } else if (args.itemData.Command == 'Image') {
                mentionObj.hidePopup();
                rteObj.showDialog('InsertImage');
            } else if (args.itemData.Command == 'Audio') {
                mentionObj.hidePopup();
                rteObj.showDialog('InsertAudio');
            } else if (args.itemData.Command == 'Video') {
                mentionObj.hidePopup();
                rteObj.showDialog('InsertVideo');
            } else if (args.itemData.Command == 'Emoji') {
                mentionObj.hidePopup();
                dialogObj.width = rteObj.element.offsetWidth * 0.5;
                dialogObj.show();
            }
            else {
                rteObj.executeCommand('formatBlock', args.itemData.Command);
            }
        }
    </script>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Smart Suggestion in ASP.NET Core Rich Text Editor control. Explore here for more details."/>
}

@*custom code end*@

@section ActionDescription{
    <div id="action-description">
        <p>This example demonstrates how to easily apply formatting or insert media and tables in the Rich Text Editor content using the Mention control. To use it, simply type the slash (/) key in the editor and select the desired format from the suggestion list that appears.</p>
    </div>
}
@section Description{
    <div id="description">
    <p> The @@mention control is integrated into the Rich Text Editor and shows the suggestion list when the slash (/) key is pressed in an editor and applies suggested formats. To achieve this, the sample is customized for the Mention and Rich Text Editor.
        <ul>
            <li>Prevent the @@mention default selection action by setting the <a target='_blank' href="https://help.syncfusion.com/cr/aspnetcore-js2/syncfusion.ej2.dropdowns.mention.html#Syncfusion_EJ2_DropDowns_Mention_Select">args.cancel</a> as <code>true</code> at the <a target='_blank' href="https://help.syncfusion.com/cr/aspnetcore-js2/syncfusion.ej2.dropdowns.mention.html#Syncfusion_EJ2_DropDowns_Mention_Select">select</a> event.</li>
            <li> Get the command name from the Mention control, select an event, and pass it to the public method <code>executeCommand</code> to perform the specified formats on the selected text in an editor.</li>
        </ul>
    <p> The following formats are shown in the mention suggestion list; apply them in an editor.</p>
        <ul>
            <li><code>Basic blocks</code> - The Rich Text Editor supports basic text formatting blocks, including <code>paragraph</code>, <code>headings</code>, <code>code</code>, <code>quotation</code>, <code>lists</code>, and <code>table</code> making it easier for users to structure their content. When a user selects a basic block format, it will be applied to the next line or paragraph.</li>
            <li><code>Inline formats</code> - The Rich Text Editor supports inline formatting, allowing you to add <code>emojis</code> to the specific text within the content.</li>
            <li><code>Media formats</code> -  The Rich Text Editor also supports media formats, including <code>images</code>, <code>videos</code>, and <code>audio</code>, making it an efficient tool for the content creation.</li>
        </ul>
    </div>
}
@section Title{
    <title>ASP.NET Core Rich Text Editor Smart Suggestion Example - Syncfusion Demos </title> 
}
@section Header{
    <h1 class='sb-sample-text'>Example of Smart Suggestion in ASP.NET Core Rich Text Editor Control</h1>
}
