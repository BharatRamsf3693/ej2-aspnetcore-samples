@using Syncfusion.EJ2
@{
    var defaultanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    string[] items = new string[] { "NewFolder", "Upload", "Cut", "Copy", "Delete", "Rename", "SortBy", "Refresh", "Selection", "View", "Details" };
    string[] contextmenuItems = new string[] { "Open", "|", "Cut", "Copy", "Delete", "Rename", "|", "Details" };

}
@section ControlsSection{
    <div class=" control-section">
        <div class="sample-container">
            <!-- File Manager real time use case sample -->
            <div id='container' class="fileupload">
                <ejs-uploader id="UploadFile"> </ejs-uploader>
                <ejs-button id="openBtn" content="File Browser"></ejs-button>
            </div>
            <div id='target' class="control-section">
                <ejs-dialog id="dialog" animationSettings="defaultanimation" width="850px" target="#target" visible="false" open="dialogOpen" close="dialogClose" showCloseIcon="true" header="Select a file">
                    <e-content-template>
                        <ejs-filemanager id="filemanager" FileOpen="onFileOpen" allowMultiSelection="false">
                            <e-filemanager-ajaxsettings url="http://localhost:62928/api/FileManager/FileOperations"
                                            downloadUrl="http://localhost:62928/api/FileManager/Download"
                                            uploadUrl="http://localhost:62928/api/FileManager/Upload"
                                            getImageUrl="http://localhost:62928/api/FileManager/GetImage">
                            </e-filemanager-ajaxsettings>
                            <e-filemanager-toolbarsettings items="items"> </e-filemanager-toolbarsettings>
                            <e-filemanager-contextmenusettings file="contextmenuItems" folder="contextmenuItems"> </e-filemanager-contextmenusettings>
                        </ejs-filemanager>
                    </e-content-template>
                </ejs-dialog>
            </div>
        </div>
    </div>
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the real-time use case of File Manager in a web application. Dialog and Uploader components are integrated with the File Manager. Click the browse button in the Uploader element to open the File Manager inside the Dialog control.Â </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The <b>File Manager</b> component is used to explore a file system through a web application, similar to the windows explorer for windows. It supports all the basic file operations such as create, rename, delete, refresh and so on.
        </p>
        <p>
            <b>Note: </b>File Manager's upload functionality is restricted in the online demo. If you need to test upload functionality, please install
            <a target="_blank" href="https://www.syncfusion.com/downloads">Syncfusion Essential Studio </a>on your machine and run the demo.
        </p>

    </div>
}

@section PreScripts{
    <script>
        document.getElementById("openBtn").addEventListener('click', function () {
            var dialogObj = document.getElementById("dialog").ej2_instances[0];
            dialogObj.show();
            var filemanagerObj = document.getElementById('filemanager').ej2_instances[0];
            filemanagerObj.path = "/";
            filemanagerObj.selectedItems = [];
            filemanagerObj.refresh();
        });
        // Uploader will be shown, if Dialog is closed
        function dialogClose() {         
            document.getElementById("container").style.display = "block";
        }
        // Uploader will be hidden, if Dialog is opened
        function dialogOpen() {
            document.getElementById("container").style.display = "none";
        }
        // File Manager's fileOpen event function
        function onFileOpen(args) {
            var file = args.fileDetails;
            if (file.isFile) {
                args.cancel = true;
                var uploadObject = document.getElementById('UploadFile').ej2_instances[0];
                var dialogObj = document.getElementById('dialog').ej2_instances[0];
                uploadObject.files = [{name: file.name, size: file.size, type: file.type }];
                dialogObj.hide();
            }
        }

    </script>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the File Upload in ASP.NET Core FileManager control. Explore here for more details."/>
                }

<style>
    .fileupload {
        max-width: 500px;
        margin: auto;
    }

    #openBtn {
        position: absolute;
        top: 34px;
        left: 43%;
    }

    .tailwind #openBtn,
    .tailwind-dark #openBtn {
        top: 28px;
    }

    .bootstrap #openBtn,
    .bootstrap-dark #openBtn {
        top: 30px;
    }

    .bootstrap5 #openBtn,
    .bootstrap5-dark #openBtn {
        top: 26px;
    }

    #target {
        height: 550px;
    }

    #dialog {
        top: 20px !important;
        max-height: 500px !important;
    }
    .fileupload .e-file-drop, .fileupload .e-css.e-btn {
        display: none;
    }

</style>
@section Title{
                    <title>ASP.NET Core FileManager File Upload Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of File Upload in ASP.NET Core FileManager Control</h1>
                }