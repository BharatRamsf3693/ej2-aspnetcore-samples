@using Syncfusion.EJ2
@section ControlsSection{

    <div class="control-section" align="center">
        <div id="container">
            <ejs-stockchart id="stockchartdefault" load="stockload" title="AAPL Stock Price" tooltipRender="tooltipRender">
                <e-stockchart-chartarea>
                    <e-stockchartarea-border width="0"></e-stockchartarea-border>
                </e-stockchart-chartarea>
                <e-stockchart-primaryxaxis>
                    <e-majorgridlines width="0"></e-majorgridlines>
                    <e-crosshairtooltip enable="true"></e-crosshairtooltip>
                </e-stockchart-primaryxaxis>
                <e-stockchart-primaryyaxis>
                    <e-linestyle width="0"></e-linestyle>
                    <e-majorticklines width="0"></e-majorticklines>
                </e-stockchart-primaryyaxis>
                <e-stockchart-tooltipsettings enable="true"></e-stockchart-tooltipsettings>
                <e-stockchart-crosshairsettings enable="true"></e-stockchart-crosshairsettings>
                <e-stockchart-series-collection>
                    <e-stockchart-series type='Candle' xName="x"> </e-stockchart-series>
                </e-stockchart-series-collection>
            </ejs-stockchart>
        </div>
    </div>
    <script src="~/scripts/chart/financial-data.js"></script>
    <script>
        var data = chartData;
        function stockload(args) {
            @*custom code start*@
            letselectedTheme: string = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.stockChart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
            @*custom code end*@
            args.stockChart.series[0].dataSource = data;
        }

        function tooltipRender(args) {
            if (args.text.split('<br/>')[4]) {
                let target = parseFloat(args.text.split('<br/>')[4].split('<b>')[1].split('</b>')[0]);
                let value = (target / 100000000).toFixed(1) + 'B';
                args.text = args.text.replace(args.text.split('<br/>')[4].split('<b>')[1].split('</b>')[0], value);
            }

        }
    </script>
}
@*custom code start*@
@section Scripts {

}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes stock chart.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Stock chart.
        <code>CandleSeries</code> is used to represent selected data value.
        Stock Chart is a well-crafted, easy-to-use financial charting package to track and
        visualize the stock price of any company over a specific period using charting and range tools.
        Its rich feature set includes zooming, panning, tooltip, crosshair, trackball, period selection,
        range selection, and events to make the stock charts more interactive.
    </p>
    <br>
}
@section Title{
                    <title>ASP.NET Core StockChart Default Example - Syncfusion Demos </title> 
                }
@section Meta{
                    <meta name="description" content="This example demonstrates the Default in ASP.NET Core StockChart control. Explore here for more details."/>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default in ASP.NET Core StockChart Control</h1>
                }