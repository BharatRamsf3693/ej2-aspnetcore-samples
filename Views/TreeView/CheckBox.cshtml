@using Syncfusion.EJ2
@{
    List<object> treedata = new List<object>();
    treedata.Add(new
    {
        id = 1,
        name = "Australia",
        hasChild = true,
        expanded = true
    });
    treedata.Add(new
    {
        id = 2,
        pid = 1,
        name = "New South Wales",

    });
    treedata.Add(new
    {
        id = 3,
        pid = 1,
        name = "Victoria"
    });

    treedata.Add(new
    {
        id = 4,
        pid = 1,
        name = "South Australia"
    });
    treedata.Add(new
    {
        id = 6,
        pid = 1,
        name = "Western Australia",

    });
    treedata.Add(new
    {
        id = 7,
        name = "Brazil",
        hasChild = true
    });
    treedata.Add(new
    {
        id = 8,
        pid = 7,
        name = "Paran�"
    });
    treedata.Add(new
    {
        id = 9,
        pid = 7,
        name = "Cear�"
    });
    treedata.Add(new
    {
        id = 10,
        pid = 7,
        name = "Acre"
    });
    treedata.Add(new
    {
        id = 11,
        name = "China",
        hasChild = true
    });
    treedata.Add(new
    {
        id = 12,
        pid = 11,
        name = "Guangzhou"
    });
    treedata.Add(new
    {
        id = 13,
        pid = 11,
        name = "Shanghai"
    });
    treedata.Add(new
    {
        id = 14,
        pid = 11,
        name = "Beijing"
    });
    treedata.Add(new
    {
        id = 15,
        pid = 11,
        name = "Shantou"

    });
    treedata.Add(new
    {
        id = 16,
        name = "France",
        hasChild = true

    });
    treedata.Add(new
    {
        id = 17,
        pid = 16,
        name = "Pays de la Loire"

    });
    treedata.Add(new
    {
        id = 18,
        pid = 16,
        name = "Aquitaine"

    });
    treedata.Add(new
    {
        id = 19,
        pid = 16,
        name = "Brittany"

    });
    treedata.Add(new
    {
        id = 20,
        pid = 16,
        name = "Lorraine"
    });
    treedata.Add(new
    {
        id = 21,
        name = "India",
        hasChild = true

    });
    treedata.Add(new
    {
        id = 22,
        pid = 21,
        name = "Assam"

    });
    treedata.Add(new
    {
        id = 23,
        pid = 21,
        name = "Bihar"
    });
    treedata.Add(new
    {
        id = 24,
        pid = 21,
        name = "Tamil Nadu"

    });
}
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            <ejs-treeview id="treedata" showCheckBox="true">
                <e-treeview-fields dataSource="treedata" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded"></e-treeview-fields>
            </ejs-treeview>
        </div>
    </div>
    <div class="col-lg-4 property-section" id="all-option-table">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="padding-right: 10px">
                        <div style="padding-left: 0;padding-top: 0">
                            <ejs-checkbox id="select" label="Auto Check" checked="true" change="onChange"></ejs-checkbox>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

@section PreScripts {
    <script>
        function onChange (args) {
            var treeObj = document.getElementById("treedata")
            treeObj.ej2_instances[0].autoCheck = args.checked;
        }
    </script>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the CheckBox in ASP.NET Core TreeView control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/treeview" target="_blank" aria-label="Navigate to explore the syncfusion ASP.NET Core TreeView example">ASP.NET Core TreeView example</a> demonstrates the CheckBox functionalities of the TreeView. Click on any parent node's CheckBox to check/uncheck the node and its child nodes. The parent node's checked state will be determined by its child nodes checked state.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The TreeView component can be rendered with checkbox on the left side of each tree node. This allows the user to check more than one nodes, and this can be enabled by the showCheckBox property.
        </p>
        <p>
            In this demo, the TreeView is populated with checkbox enabled.
        </p>
        <p>
            More information about Treeview can be found in this
            <a target="_blank"
               href="https://ej2.syncfusion.com/aspnetcore/documentation/treeview/check-box" aria-label="Navigate to the documentation for CheckBox in ASP.NET Core TreeView control">
        documentation section</a>.
            </a>.
        </p>
    </div>
}
@*custom code start*@
<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>
@*custom code end*@
@section Title{
                    <title>ASP.NET Core TreeView CheckBox Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of CheckBox in ASP.NET Core TreeView Control</h1>
                }