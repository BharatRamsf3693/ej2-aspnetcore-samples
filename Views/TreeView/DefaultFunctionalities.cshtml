@using Syncfusion.EJ2
@{
    List<Parentitem> parentitem = new List<Parentitem>();
    List<Childitem> childitem1 = new List<Childitem>();
    List<SubChilditem> subchilditem1 = new List<SubChilditem>();
    parentitem.Add(new Parentitem
    {
        nodeId = "01",
        nodeText = "Local Disk (C:)",
        expanded=true,
        child = childitem1,
    });
    childitem1.Add(new Childitem { nodeId = "01-01", nodeText = "Program Files", child=subchilditem1 });
    subchilditem1.Add(new SubChilditem { nodeId = "01-01-01", nodeText = "Windows NT" });
    subchilditem1.Add(new SubChilditem { nodeId = "01-01-02", nodeText = "Windows Mail" });
    subchilditem1.Add(new SubChilditem { nodeId = "01-01-03", nodeText = "Windows Photo Viewer" });
    List<SubChilditem> subchilditem2 = new List<SubChilditem>();
    childitem1.Add(new Childitem { nodeId = "01-02", nodeText = "Users", expanded=true, child = subchilditem2 });
    subchilditem2.Add(new SubChilditem { nodeId = "01-02-01", nodeText = "Smith" });
    subchilditem2.Add(new SubChilditem { nodeId = "01-02-02", nodeText = "Public" });
    subchilditem2.Add(new SubChilditem { nodeId = "01-02-03", nodeText = "Admin" });
    List<SubChilditem> subchilditem3 = new List<SubChilditem>();
    childitem1.Add(new Childitem { nodeId = "01-03", nodeText = "Windows", child = subchilditem3 });
    subchilditem3.Add(new SubChilditem { nodeId = "01-03-01", nodeText = "Boot" });
    subchilditem3.Add(new SubChilditem { nodeId = "01-03-02", nodeText = "FileManager" });
    subchilditem3.Add(new SubChilditem { nodeId = "01-03-03", nodeText = "System32" });
    List<Childitem> childitem2 = new List<Childitem>();
    parentitem.Add(new Parentitem
    {
        nodeId = "02",
        nodeText = "Local Disk (D:)",
        child = childitem2,
    });
    List<SubChilditem> subchilditem4 = new List<SubChilditem>();
    childitem2.Add(new Childitem { nodeId = "02-01", nodeText = "Personals", child=subchilditem4});
    subchilditem4.Add(new SubChilditem { nodeId = "02-01-01", nodeText = "My photo.png" });
    subchilditem4.Add(new SubChilditem { nodeId = "02-01-02", nodeText = "Rental document.docx" });
    subchilditem4.Add(new SubChilditem { nodeId = "02-01-03", nodeText = "Payslip.pdf" });
    List<SubChilditem> subchilditem5 = new List<SubChilditem>();
    childitem2.Add(new Childitem { nodeId = "02-02", nodeText = "Projects",child=subchilditem5 });
    subchilditem5.Add(new SubChilditem { nodeId = "02-02-01", nodeText = "Blazor Application" });
    subchilditem5.Add(new SubChilditem { nodeId = "02-02-02", nodeText = "TypeScript Application" });
    subchilditem5.Add(new SubChilditem { nodeId = "02-02-03", nodeText = "React Application" });

    List<SubChilditem> subchilditem6 = new List<SubChilditem>();
    childitem2.Add(new Childitem { nodeId = "02-02", nodeText = "Office", child = subchilditem6 });
    subchilditem6.Add(new SubChilditem { nodeId = "02-03-01", nodeText = "Work details.docx " });
    subchilditem6.Add(new SubChilditem { nodeId = "02-03-02", nodeText = "Weekly report.docx" });
    subchilditem6.Add(new SubChilditem { nodeId = "02-03-03", nodeText = "Wishlist.csv" });
    List <Childitem> childitem3 = new List<Childitem>();
    parentitem.Add(new Parentitem
    {
        nodeId = "03",
        nodeText = "Local Disk (E:)",
        child = childitem3,
    });

    List<SubChilditem> subchilditem7 = new List<SubChilditem>();
    childitem3.Add(new Childitem { nodeId = "03-01", nodeText = "Pictures" , child=subchilditem7});
    subchilditem7.Add(new SubChilditem { nodeId = "03-01-01", nodeText = "Wind.jpg " });
    subchilditem7.Add(new SubChilditem { nodeId = "03-01-02", nodeText = "Stone.jpg" });
    subchilditem7.Add(new SubChilditem { nodeId = "03-01-03", nodeText = "Home.jpg" });

    List<SubChilditem> subchilditem8 = new List<SubChilditem>();
    childitem3.Add(new Childitem { nodeId = "03-02", nodeText = "Documents", icon = "docx" , child=subchilditem8});
    subchilditem8.Add(new SubChilditem { nodeId = "03-02-01", nodeText = "Environment Pollution.docx " });
    subchilditem8.Add(new SubChilditem { nodeId = "03-02-02", nodeText = "Global Warming.ppt" });
    subchilditem8.Add(new SubChilditem { nodeId = "03-02-03", nodeText = "Social Network.pdf" });

    List<SubChilditem> subchilditem9 = new List<SubChilditem>();
    childitem3.Add(new Childitem { nodeId = "03-03", nodeText = "Study Materials",child=subchilditem9 });
    subchilditem9.Add(new SubChilditem { nodeId = "03-03-01", nodeText = "UI-Guide.pdf" });
    subchilditem9.Add(new SubChilditem { nodeId = "03-03-02", nodeText = "Tutorials.zip" });
    subchilditem9.Add(new SubChilditem { nodeId = "03-03-03", nodeText = "TypeScript.7z" });

    char[] value = { 'c', 'h', 'i','l','d' };
    string Child = new string(value);
}
@section ControlsSection{
<div class="control-section">
    <div class="control_wrapper">
        <ejs-treeview id="treedata" >
            <e-treeview-fields child="Child"  dataSource="parentitem" id="nodeId" parentId="pid" text="nodeText" hasChildren="hasChild" expanded="expanded"></e-treeview-fields>
        </ejs-treeview>
         </div>
</div>
    }
@section Meta{
                    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET Core TreeView control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/treeview" target="_blank" aria-label="Navigate to explore the syncfusion ASP.NET Core TreeView example">ASP.NET Core TreeView example</a> demonstrates the default functionalities of the TreeView. Click on node to select it, and click on icon or double click on node to expand/collapse it. The child nodes will be loaded on expand the parent node.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The TreeView component is used to display the data in a hierarchical structure with the configuration options to control the way of data is presented and manipulated. It will pull the data from a data source, such as an array of JSON objects, OData web services, or DataManager binding data fields to the fields property.
        </p>
        <p>
            In this demo, the TreeView is populated with its minimum default settings.
        </p>
        <p>
            More information about Treeview can be found in this
            <a target="_blank"
               href="https://ej2.syncfusion.com/aspnetcore/documentation/treeview/getting-started" aria-label="Navigate to the documentation for getting started with ASP.NET Core TreeView control">
        documentation section</a>.
            </a>.
        </p>
    </div>
    }
@*custom code start*@
<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>
@*custom code end*@
@section Title{
                    <title>ASP.NET Core TreeView Default Functionalities Example - Syncfusion Demos </title>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET Core TreeView Control</h1>
                }