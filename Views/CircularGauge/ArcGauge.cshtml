@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Arc Gauge in ASP.NET Core CircularGauge control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
    <p>
        This sample visualizes the progress of a work in the circular gauge using the range bar pointer with rounded corners.
    </p>
</div>

}
@section Description{
    <div id="description">
    <p>
        In this example, you can see how to render the ranges and range bar pointer with rounded corners. The EJ2 Slider control is placed at the bottom of the gauge using annotation to change the range bar pointer value. Based on the value, color of the pointer can also be changed.
    </p>
    <p>
        For more information on ranges, refer to this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation</a> section.
    </p>
</div>
}
@section ControlsSection{
    @{

        var minor = new Syncfusion.EJ2.CircularGauge.CircularGaugeTick
        {

            Height = 0,
            Width = 0,
            Color = "transparent"
        };

        var major = new Syncfusion.EJ2.CircularGauge.CircularGaugeTick
        {

            Height = 0,
            Width = 0,
            Color = "transparent"
        };

        var border = new Syncfusion.EJ2.CircularGauge.CircularGaugeBorder { Color = "grey", Width = 2 };
        var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "Segoe UI", Opacity = 1, Size = "0px", FontWeight = "Normal" };
        var titleFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "Segoe UI", Opacity = 1, Size = "18px" };
    }

    <script id='pointerValue' type="text/x-template">
        <div id='sliderwrap'>
            <div class='des'>
                <div id='default'></div>
            </div>
        </div>
    </script>
    <style>
        .sliderwrap {
            margin-top: 0px;
            width: 300px;
            align-self: center;
        }

        #slider.e-control.e-slider .e-handle {
            background-color: #4B4B4B;
        }

        .e-control-wrapper.e-slider-container.e-horizontal .e-slider-track {
            background: -webkit-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
            background: linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
            background: -moz-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
        }

        .e-limit-bar.e-limits {
            background-color: transparent !important;
        }

        .e-control-wrapper.e-slider-container.e-horizontal .e-range {
            height: 0px !important;
        }

        #slider.e-control.e-slider .e-slider-track {
            height: 8px;
            top: calc(50% - 4px);
            border-radius: 5px;
        }
    </style>
    <div class="control-section" style="border-right:0px;">
        <div id="range-container">
            <ejs-circulargauge id="range-container" loaded="gaugeLoaded" load="gaugeload" title="Progress Tracker" titleStyle="titleFont">
                <e-circulargauge-axes>
                    <e-circulargauge-axis startAngle="200" endAngle="160" minimum="0" maximum="100" radius="80%" majorTicks="major" minorTicks="minor">
                        <e-axis-linestyle width="0"></e-axis-linestyle>
                        <e-axis-labelstyle position="Inside" useRangeColor="true" font="labelFont">
                        </e-axis-labelstyle>
                        <e-circulargauge-annotations>
                            <e-circulargauge-annotation content="<div id=pointervalue style=font-size:35px;width:120px;text-align:center>60/100</div>" angle="0" zIndex="1.0" radius="0%"></e-circulargauge-annotation>
                            <e-circulargauge-annotation content="<div id=slider style=height:70px;width:250px;></div>" angle="0" zIndex="1.0" radius="-100%"></e-circulargauge-annotation>
                        </e-circulargauge-annotations>
                    </e-circulargauge-axis>
                </e-circulargauge-axes>
            </ejs-circulargauge>
        </div>
        <div id='template'>
            <div class='sliderwrap'>
                <div id='default'></div>
            </div>
        </div>
    </div>
}
<script>

    var gauge;
    function gaugeLoaded(args) {
        var annotation = document.getElementById(args.gauge.element.id + '_Annotations_0');
        if (annotation) {
            annotationRender('slider', gauge.axes[0].pointers[0].value);
        }
    }

    function annotationRender(id, sliderValue){
        var first = new ej.inputs.Slider({
            // Set the value for slider
            min: 0, max: 100,
            type: 'MinRange',
            limits: { enabled: true, minStart: 0, minEnd: 100 },
            value: sliderValue,
            change: (args) => {
                sliderValue = args.value;
                if (!isNaN(sliderValue)) {
                    gauge['isProtectedOnChange'] = true;
                    if (sliderValue >= 0 && sliderValue < 20) {
                        gauge.axes[0].pointers[0].color = '#ea501a';
                    } else if (sliderValue >= 20 && sliderValue < 40) {
                        gauge.axes[0].pointers[0].color = '#f79c02';
                    } else if (sliderValue >= 40 && sliderValue < 60) {
                        gauge.axes[0].pointers[0].color = '#e5ce20';
                    } else if (sliderValue >= 60 && sliderValue < 80) {
                        gauge.axes[0].pointers[0].color = '#a1cb43';
                    } else if (sliderValue >= 80 && sliderValue < 100) {
                        gauge.axes[0].pointers[0].color = '#82b944';
                    }
                    gauge.setPointerValue(0, 0, sliderValue);
                    if (document.getElementById('pointervalue')) {
                        document.getElementById('pointervalue').innerHTML = gauge.axes[0].pointers[0].value.toString() + '/100';
                    }
                }
            }
        });
        first.appendTo('#' + id);
    }

    window.gaugeload = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        gauge = args.gauge;
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
        var axis = args.gauge.axes[0];        
        axis.pointers = [{
            roundedCornerRadius: 20,
            value: 60,
            type: 'RangeBar',
            radius: '90%',
            color: '#e5ce20',
            border: {
                color: 'grey',
                width: 0
            },
            animation: {
                enable: false
            },
            pointerWidth: 30

        }];
        axis.ranges = [
            {
                start: 0, end: 100,
                radius: '90%',
                startWidth: 30, endWidth: 30,
                color: '#E0E0E0',
                roundedCornerRadius: 20
            }
        ];
    }
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Arc Gauge Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Arc Gauge in ASP.NET Core CircularGauge Control</h1>
                }