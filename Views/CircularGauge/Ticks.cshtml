@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Ticks and Labels in ASP.NET Core CircularGauge control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates how to customize the ticks and labels of an axis.
            Position, offset, and height of the tick and label can be changed by using the options provided in the property panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the ticks and labels of an axis in the circular gauge. Labels are
            units that are used to display the values in the axis. You can customize <code>labels</code> with the properties
            like <code>angle</code>, <code>font</code>,
            <code>position</code>, etc. Ticks are used to mark some values on the axis. You can also customize the ticks using the 
            <code>majorTicks</code>,
            <code>minorTicks</code> properties.
        </p>
        <p>
            More information on the labels can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
@{ 
    var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "Segoe UI", Opacity = 1, Size = "12px" };
}
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            <ejs-circulargauge id="circular" load="gaugeload">
                <e-circulargauge-axes>
                    <e-circulargauge-axis startAngle="210" endAngle="150" minimum="0" maximum="170" radius="75%">
                        <e-axis-linestyle width="2" color="#9E9E9E"></e-axis-linestyle>
                        <e-axis-labelstyle position="@Syncfusion.EJ2.CircularGauge.Position.Outside" autoAngle="true" font="labelFont"></e-axis-labelstyle>
                        <e-axis-majorticks position="@Syncfusion.EJ2.CircularGauge.Position.Inside" color="#757575" width="2" height="10" interval="20"></e-axis-majorticks>
                        <e-axis-minorticks position="@Syncfusion.EJ2.CircularGauge.Position.Inside" color="#757575" width="2" height="5" interval="10"></e-axis-minorticks>
                    </e-circulargauge-axis>
                </e-circulargauge-axes>
            </ejs-circulargauge>
        </div>        
    </div>
<div class="col-md-4 property-section">
    <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
        <tbody>
            <tr>
                <td>
                    <div> Ticks </div>
                </td>
                <td>
                    <div>
                        <select id="Ticks" class="form-control">
                            <option value="major">Major Ticks</option>
                            <option value="minor">Minor Ticks</option>
                        </select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div> Tick Position </div>
                </td>
                <td>
                    <div>
						<select id="tickposition" class="form-control">
							<option value="Inside">Inside</option>
							<option value="Cross">Cross</option>
							<option value="Outside">Outside</option>
						</select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div> Label Position </div>
                </td>
                <td>
                    <div>
						<select id="labelposition" class="form-control">
							<option value="Outside">Outside</option>
							<option value="Cross">Cross</option>
							<option value="Inside">Inside</option>
						</select>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="margin-top: 10px">Tick Offset</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="tickOffset" value="0" min="0" max="50" style="width: 80%; margin-top: 10px;">
                    </div>
                </td>
                <td style="width: 10%;padding-top: 20px;text-align: center;">
                    <span id='offset' style="margin-left: -20px;">0</span>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="margin-top: 20px">Tick Height</div>
                </td>
                <td>
                    <div>
                        <input type="range" id="tickHeight" value="10" min="1" max="50" style="width: 80%; margin-top: 20px;">
                    </div>
                </td>
                <td style="width: 10%;padding-top: 30px;text-align: center;">
                    <span id='height' style="margin-left: -20px;">10</span>
                </td>
            </tr>
            <tr>
                <td>
                    <div style="margin-top: 20px">Label Offset </div>
                </td>
                <td>
                    <div>
                        <input type="range" id="labelOffset" value="0" min="0" max="50" style="width: 80%; margin-top: 20px;">
                    </div>
                </td>
                <td style="width: 10%;padding-top: 30px;text-align: center;">
                    <span id='labelOffsetValue' style="margin-left: -20px;">0</span>
                </td>
            </tr>
            <tr>
                <td>
                    <div id="enablePointer" style="margin-top: 15px">Show Last Label </div>
                </td>
                <td>
                    <div>
                        <input type="checkbox" id="enable" style="margin-top: 20px;">
                    </div>
                </td>
            </tr>
        </tbody>

    </table>
</div>
}
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
<script>
    window.gaugeload = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
        if (window.gaugeLoaded)
            return;
        window.gaugeLoaded = true;
        var axis = args.gauge.axes[0];
		axis.ranges = [{ start: 0, end: 145, color: '#8BC34A', radius: '60%' }];
        axis.annotations = [{
            content: '<div id="content" style="color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;">145</div>',
            angle: 0, radius: '0%', zIndex: '1',
        }];
        axis.pointers = [];
        circulargauge = args.gauge;
    }
    var isMajorTicks = true, circulargauge;
    window.addEventListener('load', function () {
        var ticks, tickPosition, labelPosition;
        ticks = new ej.dropdowns.DropDownList({
            index: 0, width: '100%',
            change: function () {
                var value = ticks.value.toString();
                var tick;
                isMajorTicks = value === 'major';
                if (isMajorTicks) {
                    tick = circulargauge.axes[0].majorTicks;
                }
                else {
                    tick = circulargauge.axes[0].minorTicks;
                }
                tickPosition.value = tick.position;
                document.getElementById('tickOffset').value = tick.offset.toString();
                document.getElementById('tickHeight').value = tick.height.toString();
                document.getElementById('offset').innerHTML = tick.offset.toString();
                document.getElementById('height').innerHTML = tick.height.toString();
            }
        });
        ticks.appendTo('#Ticks');
        tickPosition = new ej.dropdowns.DropDownList({
            index: 0, width: '100%',
            change: function () {
                var value = tickPosition.value.toString();
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.position = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.position = value;
                }
                circulargauge.refresh();
            }
        });
        tickPosition.appendTo('#tickposition');
        labelPosition = new ej.dropdowns.DropDownList({
            index: 0, width: '100%',
            change: function () {
                circulargauge.axes[0].labelStyle.position = labelPosition.value.toString();
                circulargauge.refresh();
            }
        });
        labelPosition.appendTo('#labelposition');
        document.getElementById('tickOffset').onpointermove = document.getElementById('tickOffset').ontouchmove =
            document.getElementById('tickOffset').onchange = function () {
                var value = parseInt(document.getElementById('tickOffset').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.offset = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.offset = value;
                }
            document.getElementById('offset').innerHTML = value.toString();
                circulargauge.refresh();
            };
        document.getElementById('tickHeight').onpointermove = document.getElementById('tickHeight').ontouchmove =
            document.getElementById('tickHeight').onchange = function () {
                var value = parseInt(document.getElementById('tickHeight').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.height = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.height = value;
                }
            document.getElementById('height').innerHTML = value.toString();
                circulargauge.refresh();
            };
        document.getElementById('labelOffset').onpointermove = document.getElementById('labelOffset').ontouchmove =
            document.getElementById('labelOffset').onchange = function () {
                var value = parseInt(document.getElementById('labelOffset').value, 10);
                circulargauge.axes[0].labelStyle.offset = value;
            document.getElementById('labelOffsetValue').innerHTML = value.toString();
                circulargauge.refresh();
            };
        document.getElementById('enable').onchange = function () {
            var showLastLabel = document.getElementById('enable').checked;
            circulargauge.axes[0].showLastLabel = showLastLabel;
            circulargauge.refresh();
        };
    });
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Ticks and Labels Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Ticks and Labels in ASP.NET Core CircularGauge Control</h1>
                }