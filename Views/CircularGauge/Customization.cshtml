@using Syncfusion.EJ2;
@section Meta{
                    <meta name="description" content="This example demonstrates the Gauge Customization in ASP.NET Core CircularGauge control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates how to customize the gauge with pointers.
            Options to change the color and type of the pointer are available in the property panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to customize the gauge elements such as <code>pointers</code> and <code>range</code>.
            Here, a needle and range bar are added to show the current value and its appearance
            can be customized by using options in property panel.
        </p>
        <p>
            More information on the range and pointer customization can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation"> documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
    <div class="col-md-8 control-section">
        <div class="content-wrapper" id="circular" style="display: block">
            <ejs-circulargauge id="circular" load="gaugeload" centerY='70%'>
                <e-circulargauge-axes>
                    <e-circulargauge-axis startAngle="300" endAngle="60" minimum="1" maximum="200" radius="80%">
                        <e-axis-linestyle width="8" color="transparent"></e-axis-linestyle>
                        <e-axis-labelstyle offset="-5"></e-axis-labelstyle>
                        <e-axis-majorticks width="0" color="transparent"></e-axis-majorticks>
                        <e-axis-minorticks width="0" color="transparent"></e-axis-minorticks>
                    </e-circulargauge-axis>
                </e-circulargauge-axes>
            </ejs-circulargauge>
        </div>
		<div class="content-wrapper" id="circular1" style="display: none">
			<ejs-circulargauge id="circular1"></ejs-circulargauge></div>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
            <tbody>
                <tr style="height: 50px">
                    <td align="center">
                        <img id="random" src="~/styles/images/circulargauge/gauge1.png" alt="Customized gauge 1" style="margin-top:10px;">
                        <div id="random_line" style="display:block;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 9px;"></div>
                    </td>
                    <td align="center">
                        <img id="usage" src="~/styles/images/circulargauge/gauge2.png" alt="Customized gauge 2" style="margin-top:10px;">
                        <div id="usage_line" style="display:none;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 5px;"></div>
                    </td>
                </tr>
                <tr style="height: 20px"></tr>
                <tr style="height: 50px">
                    <td>
                        <div>Current Value</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" id="currentValue" value="180" min="1" max="200" style="width:54%; margin-left: 20px">
                        </div>
                    </td>
                    <td style="width: 10%;padding-top: 10px;text-align: center;">
                        <span id='currentPointerValue' style="margin-left: -30px;">180</span>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div id="rangebarColor">RangeBar Color</div>
                    </td>
                    <td>
                        <div style="margin-left: 20px">
                            <select id="barColor" class="form-control">
                                <option value="#FFDD00">#FFDD00</option>
                                <option value="#00bdae">#00bdae</option>
                                <option value="#FF2680">#FF2680</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div id="range">Range Color</div>
                    </td>
                    <td>
                        <div style="margin-left: 20px">
                            <select id="rangeColor" class="form-control">
                                <option value="#E0E0E0">#E0E0E0</option>
                                <option value="#7bb4eb">#7bb4eb</option>
                                <option value="#ea7a57">#ea7a57</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div id="pointColor">Pointer Color</div>
                    </td>
                    <td>
                        <div style="margin-left: 20px">
                            <select id="pointerColor" class="form-control">
                                <option value="#424242">#424242</option>
                                <option value="#6f6fe2">#6f6fe2</option>
                                <option value="#9e480e">#9e480e</option>
                            </select>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}
<script>
    var random, usage;
    window.addEventListener("load", function (event) {
        random = document.getElementById('circular').ej2_instances[0];
		usage = new ej.circulargauge.CircularGauge(customGauge2());
		usage.appendTo('#circular1');
        var gauge = random;
        var isUsage = false;
        var barColor;
        var rangeColor;
        var pointerColor;
        barColor = new ej.dropdowns.DropDownList({
            index: 0,
            width: '100%',
            change: function () {
                gauge.axes[0].pointers[0].color = barColor.value.toString();
                gauge.refresh();
            }
        });
        barColor.appendTo('#barColor');
        rangeColor = new ej.dropdowns.DropDownList({
            index: 0,
            width: '100%',
            change: function () {
                gauge.axes[0].ranges[0].color = rangeColor.value.toString();
                gauge.refresh();
            }
        });
        rangeColor.appendTo('#rangeColor');
        pointerColor = new ej.dropdowns.DropDownList({
            index: 0,
            width: '100%',
            change: function () {
                var color = pointerColor.value.toString();
                if (!isUsage) {
                    gauge.axes[0].pointers[1].color = color;
                    gauge.axes[0].pointers[1].cap.border.color = color;
                    gauge.axes[0].pointers[1].cap.color = color;
                }
                gauge.refresh();
            }
        });
        pointerColor.appendTo('#pointerColor');
        document.getElementById('usage').onclick = function () {
			document.getElementById('circular').style.display = 'none';
			document.getElementById('circular1').style.display = 'block';
            gauge = usage;
            isUsage = true;
            var element = document.getElementById('currentValue');
            element.min = '0.5';
            element.max = '100';
            element.value = usage.axes[0].pointers[0].value.toString();
            document.getElementById('currentPointerValue').innerHTML =
                usage.axes[0].pointers[0].value.toString();
            barColor.value = usage.axes[0].pointers[0].color;
            rangeColor.value = usage.axes[0].ranges[0].color;
            pointerColor.enabled = false;
            var pointElement = document.getElementById('pointColor');
            pointElement.className = 'e-disabled';
            var currentElement = document.getElementById('usage');
            var existElement = document.getElementById('random');
            var currentLine = document.getElementById('usage_line');
            var exisLine = document.getElementById('random_line');
            currentLine.style.display = 'block';
            exisLine.style.display = 'none';
        };
        document.getElementById('random').onclick = function () {
			document.getElementById('circular1').style.display = 'none';
			document.getElementById('circular').style.display = 'block';
            gauge = random;
            isUsage = false;
            var currentElement = document.getElementById('random');
            var existElement = document.getElementById('usage');
            var exisLine = document.getElementById('usage_line');
            var currentLine = document.getElementById('random_line');
            currentLine.style.display = 'block';
            exisLine.style.display = 'none';
            var element = document.getElementById('currentValue');
            var pointElement = document.getElementById('pointColor');
            pointElement.className = 'e-enabled';
            pointerColor.enabled = true;
            element.min = '1';
            element.max = '200';
            element.value = random.axes[0].pointers[0].value.toString();
            document.getElementById('currentPointerValue').innerHTML =
                random.axes[0].pointers[0].value.toString();
            barColor.value = random.axes[0].pointers[0].color;
            rangeColor.value = random.axes[0].ranges[0].color;
            pointerColor.value = random.axes[0].pointers[1].color;
        };
        document.getElementById('currentValue').onpointermove = document.getElementById('currentValue').ontouchmove =
            document.getElementById('currentValue').onchange = function () {
                var value = +document.getElementById('currentValue').value;
                gauge.axes[0].pointers[0].value = value;
                if (!isUsage)
                    gauge.axes[0].pointers[1].value = value;

            gauge.axes[0].annotations[0].content = '<div style="color:#666666;font-size:35px;font-family:Segeo UI">' + value + (isUsage ? 'GB' : ' ' + 'Mbps') + '</div>';                
            document.getElementById('currentPointerValue').innerHTML = value.toString();
                gauge.refresh();
            };
        @* custom code start *@
        var selectedTheme = location.hash.split('/')[1];
        var color;
        if (selectedTheme === 'bootstrap') {
            color = '#a16ee5';
        }
        else if (selectedTheme === 'fabric') {
            color = '#1783FF';
        }
        else {
            color = '#ff4081';
        }
        @* custom code end *@
        var exisLine = document.getElementById('usage_line');
        var currentLine = document.getElementById('random_line');
        exisLine.style.background = color;
        currentLine.style.background = color;    
    });
    function customGauge2() {
        var customGauge2 = new ej.circulargauge.CircularGauge({
            load: function (args) {
                var selectedTheme = location.hash.split('/')[1];
                selectedTheme = selectedTheme ? selectedTheme : 'Material';
                args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +
                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
            },
            axes: [{
                annotations: [{
                    content: '<div style="color:#666666;font-size:35px;font-family:Segeo UI">50.5GB</div>',
                    angle: 180, radius: '0%', zIndex: 1
                }, {
                    content: '<div style="color:#757575;font-size:15px;font-family:Segeo UI">Used</div>',
                    angle: 180, radius: '25%',
                    textStyle: {
                        fontFamily: 'Roboto',
                        color: '#9E9E9E',
                        fontStyle: 'Bold',
                        fontWeight: 'Regular',
                        size: '14px'
                    }, zIndex: 1
                }],
                lineStyle: { width: 0 },
                startAngle: 180, endAngle: 180,
                radius: '80%',
                labelStyle: { font: { size: '0px' } },
                majorTicks: { width: 0 },
                minorTicks: { height: 0 },
                minimum: 0, maximum: 100,
                ranges: [{
                    start: 0, end: 100,
                    radius: '80%', startWidth: 30,
                    endWidth: 30, color: '#E0E0E0'
                }],
                pointers: [{
                    type: 'RangeBar',
                    value: 50.5, radius: '80%',
                    color: '#FF2680', animation: { duration: 0 },
                    pointerWidth: 30
                }]
            }]
        });
        return customGauge2;
    }
    window.gaugeload = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
        if (window.gaugeLoaded)
            return;
        window.gaugeLoaded = true;
        var axis = args.gauge.axes[0];
        axis.labelStyle.font = {
            fontFamily: "Roboto",
            size: "12px",
            fontWeight: "Regular",
            color: "transparent"
        };
        axis.pointers = [{
            type: 'RangeBar',
            value: 180, radius: '90%',
            color: '#FFDD00', animation: { duration: 0 },
            pointerWidth: 30
        }, {
            radius: '90%', value: 180,
            color: '#424242',
            animation: { duration: 0 },
            pointerWidth: 9,
            cap: { radius: 10, color: '#424242', border: { width: 0 } }
        }];
        axis.annotations = [{
            content: '<div style="color:#666666;font-size:35px;font-family:Segeo UI">180 Mbps</div>',
            angle: 0,
            radius: '110%', zIndex: 1
        }];
        axis.ranges = [{
            start: 1, end: 200,
            radius: '90%',
            startWidth: 30, endWidth: 30,
            color: '#E0E0E0'
        }];
    }
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Gauge Customization Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Gauge Customization in ASP.NET Core CircularGauge Control</h1>
                }