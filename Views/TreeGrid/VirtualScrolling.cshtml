@{
    ViewData["Title"] = "VirtualScrolling";
}

<h2>VirtualScrolling</h2>

@section ControlsSection{
    @{

        var data = ViewBag.datasource;
    }
    <div class="control-section">
    
        <div>
            <ejs-treegrid id="TreeGrid" height="600" dataSource="ViewBag.datasource" enableVirtualization="true"  childMapping="Children" treeColumnIndex="1" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Indent", "Outdent" })">
            <e-treegrid-editsettings allowAdding="true" allowEditing="true" allowDeleting="true" mode="Row" newRowPosition="Child"></e-treegrid-editsettings>
                <e-treegrid-columns>
                    <e-treegrid-column field="TaskID" headerText="Player Jersey" validationRules="@(new { required=true, number=true })" textAlign="Right" width="120" isPrimaryKey="true"></e-treegrid-column>
                    <e-treegrid-column field="FIELD1" headerText="Player Name" validationRules="@(new { required=true })" width="120"></e-treegrid-column>
                    <e-treegrid-column field="FIELD2" headerText="Year" textAlign="Right" width="100"></e-treegrid-column>
                    <e-treegrid-column field="FIELD3" headerText="Stint" textAlign="Right" width="120"></e-treegrid-column>
                    <e-treegrid-column field="FIELD4" headerText="TMID" textAlign="Right" width="120"></e-treegrid-column>
                </e-treegrid-columns>
            </ejs-treegrid>
        </div>
    </div>
    
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the TreeGrid component with the virtual scrolling feature. Scroll the TreeGrid content vertically to load rows.
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Virtual Scrolling in ASP.NET Core Tree Grid control. Explore here for more details."/>
                }
@section Description{
    <div id="description">
        <p>
            The TreeGrid UI virtualization allows you to render only rows visible within the view-port without buffering the entire datasource.
            To enable the virtualization, set <code>
                <a target="_blank" class="code"
                    enableVirtualization
                </a>
            </code> property as true.
        </p>
        <p>
            Note: The <code>
                <a target="_blank" class="code"
                    height
                </a>
            </code> property must be defined when enabling <code>
                <a target="_blank" class="code"
                    enableVirtualization
                </a>
            </code>.
        </p>
        <p>
            In this demo, Tree Grid is enabled with row virtualization and also perform the CRUD (Add, Edit, Delete, Update) actions.
        </p> 
    </div>
}
@section Title{
                    <title>ASP.NET Core Tree Grid Virtual Scrolling Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Virtual Scrolling in ASP.NET Core Tree Grid Control</h1>
                }
