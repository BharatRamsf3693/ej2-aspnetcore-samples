@using Syncfusion.EJ2
@section ControlsSection{
  <div class="control-section">
    <div id="container" align="center">
        <ejs-chart id="lineContainer"  load="window.onChartLoad" loaded="loadedChart"
                  title="Sprint Task Analysis"
                  pointRender="pointRender" axisLabelRender="labelRender">

            <e-chart-primaryxaxis title="Assignee" rangePadding="Additional" valueType="Category">
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis>
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
                <e-labelstyle color="transparent"></e-labelstyle>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-legendsettings visible="false"></e-chart-legendsettings>
            <e-chart-tooltipsettings enable="true"></e-chart-tooltipsettings>
            <e-series-collection>
                <e-series name="Story Point" xName="Assignee" width=2 yName="Estimate" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column" query="new ej.data.Query().take(5).where('Estimate', 'lessThan', 3, false)">
                    <e-data-manager url='https://mvc.syncfusion.com/Services/Northwnd.svc/Tasks/' crossdomain="true"></e-data-manager>
                    <e-series-marker>
                        <e-series-datalabel visible="true" position="Top">
                            <e-font color="#ffffff" fontWeight="600"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                    <e-series-animation enable="false"></e-series-animation>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div id="waitingpopup" class="waitingpopup" style="display:none">
        <span id="gif" class="image"></span>
    </div>
</div>
    <script src="~/scripts/chart/financial-data.js"></script>
    <script>
    @*custom code start*@
        window.onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    @*custom code end*@    
        function labelRender(args) {
            if (args.axis.orientation === 'Horizontal') {
                args.text = args.text.split(' ')[0];
            }
        };
        var loaded = 1;
        function loadedChart(args) {
            var div = document.getElementById('waitingpopup');
            div.style.display = 'none';
            if (loaded) {
				loaded = 0;
                args.chart.refresh();
            }            
        };
        function pointRender(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = window.fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = window.materialColors[args.point.index % 10];
            }
            else if (selectedTheme === 'bootstrap') {
                args.fill = window.bootstrapColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent') {
                 args.fill = window.fluentColors[args.point.index % 10];
            } 
            else if (selectedTheme === 'fluent-dark') {
                 args.fill = window.fluentDarkColors[args.point.index % 10];
            }
            else {
                args.fill = window.highContrastColors[args.point.index % 10];
            }
        };

    </script>
}
@*custom code start*@
@section Scripts {

}

<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Remote Data in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates how to retrieve remote the data for chart.
    </p>
}
@section Description{
    <p>
        The Chart supports data binding. The <code> dataSource</code> property can be assigned with the instance of <code>
            <a target="_blank" class="code"
               href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">
                DataManager
            </a>
        </code> to bind remote data.
    </p>

    <p>
        The DataManager, which will act as an interface between the service endpoint and the chart, will require the below minimal
        information to interact with service endpoint properly.
    </p>
    <ul>
        <li><code>DataManager->url</code> - Defines the service endpoint to fetch data</li>
        <li>
            <code>DataManager->adaptor</code> - Defines the adaptor option. By default, <code>ODataAdaptor</code> is used for
            remote binding.
        </li>
    </ul>
    <p>
        Adaptor is responsible for processing response and request from/to the service endpoint. <code></code>        package provides some predefined adaptors which are designed to interact with particular service endpoints. They
        are,
    </p>
    <ul>
        <li>
            <code>UrlAdaptor</code> - Use this to interact any remote services. This is the base adaptor for all remote based
            adaptors.
        </li>
        <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
        <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
        <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
        <li><code>WebMethodAdaptor</code> - Use this to interact with web methods.</li>
    </ul>
    <p>
        In this demo, remote data is bound by assigning service data as an instance of <code>
            <a target="_blank" class="code"
               href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">
                DataManager
            </a>
        </code> to the <code>
            dataSource
        </code> property.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Remote Data Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Remote Data in ASP.NET Core Chart Control</h1>
                }