@using Syncfusion.EJ2
@section ControlsSection{
    @{
        var Drop = "Drop";
    }
    <div class="control-section col-lg-9" align='center'>
        <ejs-accumulationchart id="container" title="Annual Product wise Profit Analysis" load="load">
            <e-accumulationchart-tooltipsettings enable="true"></e-accumulationchart-tooltipsettings>
            <e-accumulationchart-legendsettings visible="false">
            </e-accumulationchart-legendsettings>
            <e-accumulation-series-collection>
                <e-accumulation-series xName="x" yName="y" name="Profit">
                    <e-accumulationseries-datalabel name="text" visible="true">
                        <e-font fontWeight="600" color="white"></e-font>
                    </e-accumulationseries-datalabel>
                    <e-accumulationseries-emptypointsettings fill="#e6e6e6"></e-accumulationseries-emptypointsettings>
                </e-accumulation-series>
            </e-accumulation-series-collection>
        </ejs-accumulationchart>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Empty Point Mode:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <ejs-dropdownlist id="emptypointmode" dataSource="@ViewBag.data" value="Drop" change="onChange" index="0" popupHeight="220px"></ejs-dropdownlist>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
        function load(args) {
            var indexedTheme = location.hash.split('/')[1];
            indexedTheme = indexedTheme ? indexedTheme : 'Material';
            args.accumulation.theme = (indexedTheme.charAt(0).toUpperCase() + indexedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.accumulation.dataSource = [
                { x : "Rice",  y : 80 },
                { x : "Wheat", y : null },
                { x : "Oil",   y : 70 },
                { x : "Corn",  y : 60 },
                { x : "Gram",  y : null },
                { x : "Milk",  y : 70 },
                { x : "Peas",  y : 80 },
                { x : "Fruit", y : 60 },
                { x : "Butter",y : null }
            ];
        }
        function onChange(args) {
            var pie = document.getElementById("container").ej2_instances[0];
            pie.series[0].emptyPointSettings.mode = this.value;
            pie.refresh();

        }
    </script>
}

    @*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section ActionDescription{

    <div id="action-description">
        This sample demonstrates pie chart with empty points. For pie chart, you can change start angle of chart by Pie Angle in properties panel. Outer radius for pie chart can be changed by Outer Radius. Explode Index and explode radius for chart can be changed by Explode Radius and Explode Index.
    </div>
}
    @*custom code end*@
@section Description {
    <div id="description">
        In this example, you can see how to render and configure the pie chart. You can use the border and fill properties to customize the pie point. dataLabel is used to represent individual data and its value.

        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </div>

}
@section Title{
                 <title>ASP.NET Core Chart Empty Points Example - Syncfusion Demos </title>
             }
@section Meta{
                <meta name="description" content="This example demonstrates the Empty Points in ASP.NET Core Chart control. Explore here for more details."/>
            }
@section Header{
                <h1 class='sb-sample-text'>Example of Empty Points in ASP.NET Core Chart Control</h1>
            }