@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div id="container" align="center">
            <ejs-chart id="lineContainer" load="window.onChartLoad" title="Examination Result">
                <e-chart-tooltipsettings enable="true">
                </e-chart-tooltipsettings>
                <e-chart-legendsettings visible="false">
                </e-chart-legendsettings>
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-chart-primaryxaxis title="Score of Final Examination" minimum="0" maximum="100">
                    <e-majorgridlines width="0"></e-majorgridlines>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis minimum=0 maximum=50 title="Number of Students" interval=10 >
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-linestyle width="0"></e-linestyle>
                </e-chart-primaryyaxis>
                <e-series-collection>
                    <e-series name="Score" binInterval=20 yName="y" showNormalDistribution="true" columnWidth="0.99"
                              type="@Syncfusion.EJ2.Charts.ChartSeriesType.Histogram">
                        <e-series-marker>
                            <e-series-datalabel visible="true" position="Top" >
                                <e-font color="#ffffff" fontWeight="600"></e-font>
                            </e-series-datalabel>
                        </e-series-marker>
                    </e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
        <script>
            var chartData = [];
            var points = [5.250, 7.750, 0, 8.275, 9.750, 7.750, 8.275, 6.250, 5.750,
                5.250, 23.000, 26.500, 27.750, 25.025, 26.500, 26.500, 28.025, 29.250, 26.750, 27.250,
                26.250, 25.250, 34.500, 25.625, 25.500, 26.625, 36.275, 36.250, 26.875, 40.000, 43.000,
                46.500, 47.750, 45.025, 56.500, 56.500, 58.025, 59.250, 56.750, 57.250,
                46.250, 55.250, 44.500, 45.525, 55.500, 46.625, 46.275, 56.250, 46.875, 43.000,
                46.250, 55.250, 44.500, 45.425, 55.500, 56.625, 46.275, 56.250, 46.875, 43.000,
                46.250, 55.250, 44.500, 45.425, 55.500, 46.625, 56.275, 46.250, 56.875, 41.000, 63.000,
                66.500, 67.750, 65.025, 66.500, 76.500, 78.025, 79.250, 76.750, 77.250,
                66.250, 75.250, 74.500, 65.625, 75.500, 76.625, 76.275, 66.250, 66.875, 80.000, 85.250,
                87.750, 89.000, 88.275, 89.750, 97.750, 98.275, 96.250, 95.750, 95.250
            ];
            points.map((value) => {
                chartData.push({
                    y: value
                });
            });

            window.onChartLoad = function (args) {
                @*custom code start*@
                var selectedTheme = location.hash.split('/')[1];
                selectedTheme = selectedTheme ? selectedTheme : 'Material';
                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
                if (selectedTheme === 'highcontrast') {
                        args.chart.series[0].marker.dataLabel.font.color = '#000000';
                }
                args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
                @*custom code end*@
                args.chart.series[0].dataSource = chartData;
            }
        </script>
        @*custom code start*@
        <style>
            #control-container {
                padding: 0px !important;
            }
        </style>
        @*custom code end*@
    </div>
}
@*custom code start*@
@section Scripts {

}

@section Meta{
                    <meta name="description" content="This example demonstrates the Histogram in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes the student's results of the final examination with histogram series in chart.
        Number of students between each interval is shown by using the data label.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the histogram type charts.
        Histogram type charts can provide a visual display of large amounts of data that are difficult to understand in a tabular or spreadsheet form.
        You can use the <code>border</code> and <code>fill</code> properties to customize the vertical rect.
        The <code>dataLabel</code> property is used to represent individual data and its value.
    </p>
    <p>
        Tooltip is enabled in this example.
        To see the tooltip in action, hover the mouse over a point or tap a point in touch enabled devices.
    </p>
    <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Chart component features are segregated into individual feature-wise modules.
        To use histogram series, you should inject the <code>HistogramSeries</code> module using the <code>Chart.Inject(HistogramSeries)</code> method.
    </p>
    <p>
        More information on the histogram series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
@section Title{
                 <title>ASP.NET Core Chart Histogram Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Histogram in ASP.NET Core Chart Control</h1>
            }