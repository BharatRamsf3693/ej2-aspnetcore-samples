@using Syncfusion.EJ2
@section ControlsSection{
    @{        
        var Polar = "Polar";
    }

    <div class="control-section col-lg-9">
        <ejs-chart id="container" load="window.onChartLoad" title="GDP, Current Prices (in Billions)">
            <e-chart-tooltipsettings enable="true">
            </e-chart-tooltipsettings>
            <e-chart-legendsettings visible="true">
            </e-chart-legendsettings>
            <e-chart-primaryxaxis valueType="Category" labelPlacement="OnTicks" interval="1" coefficient="100"></e-chart-primaryxaxis>
            <e-series-collection>
                <e-series dataSource="ViewBag.dataSource" name="2013" xName="x" width="2" yName="y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Polar" drawType="@Syncfusion.EJ2.Charts.ChartDrawType.StackingArea"></e-series>
                <e-series dataSource="ViewBag.dataSource" name="2014" xName="x" width="2" yName="y1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Polar" drawType="@Syncfusion.EJ2.Charts.ChartDrawType.StackingArea"></e-series>
                <e-series dataSource="ViewBag.dataSource" name="2015" xName="x" width="2" yName="y2" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Polar" drawType="@Syncfusion.EJ2.Charts.ChartDrawType.StackingArea"></e-series>
                <e-series dataSource="ViewBag.dataSource" name="2016" xName="x" width="2" yName="y3" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Polar" drawType="@Syncfusion.EJ2.Charts.ChartDrawType.StackingArea"></e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div class="col-lg-3 property-section">
        <div class="property-panel-section">
            <div class="property-panel-content">
                <table id="property" class="property-panel-table" title="Properties" style="width: 100%">
                    <tr style="height: 50px">
                        <td style="width: 50%">
                            <div>Series Type:</div>
                        </td>
                        <td style="width: 50%;">
                            <ejs-dropdownlist id="serieschange" dataSource="@ViewBag.select" value="Polar" change="seriesChange" popupHeight="220px"></ejs-dropdownlist>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>


    <script>
    @*custom code start*@
        window.onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
        }
    @*custom code end*@
        function seriesChange() {
            var chart = document.getElementById('container').ej2_instances[0];
            chart.series[0].type = this.value;
            chart.series[1].type = this.value;
            chart.series[2].type = this.value;
            chart.series[3].type = this.value;
            chart.series[0].animation.enable = true;
            chart.series[1].animation.enable = true;
            chart.series[2].animation.enable = true;
            chart.series[3].animation.enable = true;
            chart.refresh();
        }
    </script>

@*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
@*custom code end*@
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Stacked Area in ASP.NET Core Chart control. Explore here for more details."/>
                }
@section ActionDescription{
    <p>
        This sample demonstrates polar series with stacking area type for GDP of different countries in recent years. The switching between polar and radar series can be done by using <code>Series Type</code> in property panel.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the stacking area type charts. Stacks the series on top of another
        series to avoid the overlapping of series with one another, when rendering more than one area series in same chart.
        You can use <code>fill</code> properties to customize the stacked area. <code>dataLabel</code> is used to
        represent individual data and its value.
    </p>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Chart component features are segregated into individual feature-wise modules. To use stacking area drawtype in Polar series
        and Radar series, we need to inject
        <code>PolarSeries</code>, <code>RadarSeries</code> and <code>StackingAreaSeries</code> module using <code>Chart.Inject(PolarSeries, RadarSeries, StackingAreaSeries)</code>        method.
    </p>
    <p>
        More information on the Numeric axis can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-axis.html#valuetype-valuetype">documentation section</a>.
    </p>
}
@section Title{
                 <title>ASP.NET Core Chart Stacked Area Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Stacked Area in ASP.NET Core Chart Control</h1>
            }