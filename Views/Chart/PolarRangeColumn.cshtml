@using Syncfusion.EJ2
@section ControlsSection{
    @{
        
       var Polar = "Polar";
    }

    <div class="control-section col-lg-9">        
            <ejs-chart id="container" textRender="textRender" load="window.onChartLoad" title="Maximum and Minimum Temperature">
                <e-chart-primaryxaxis interval="1" coefficient="100" labelPlacement="OnTicks" startAngle=90 valueType="Category"></e-chart-primaryxaxis>
                <e-chart-primaryyaxis minimum="0" maximum="15" interval="5" labelFormat="{value}˚C"></e-chart-primaryyaxis>
                <e-chart-tooltipsettings enable="true">
                </e-chart-tooltipsettings>
                <e-chart-legendsettings visible="false">
                </e-chart-legendsettings>
                <e-series-collection>
                    <e-series dataSource="ViewBag.dataSource" name="Germany" xName="x" width="2" low="low" high="high" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Polar" drawType="@Syncfusion.EJ2.Charts.ChartDrawType.RangeColumn">
                        <e-series-border color="white" width="3"></e-series-border>
                        <e-series-marker>
                            <e-series-datalabel visible="true" position="Top" enableRotation="true">
                                <e-font color="#ffffff" fontWeight="600"></e-font>
                            </e-series-datalabel>
                        </e-series-marker>
                    </e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
        <div class="col-lg-3 property-section">
            <div class="property-panel-section">
                <div class="property-panel-content">
                    <table id="property" class="property-panel-table" title="Properties" style="width: 100%">
                        <tr style="height: 50px">
                            <td style="width: 50%">
                                <div>Series Type:</div>
                            </td>
                            <td style="width: 50%;">
                                <ejs-dropdownlist id="serieschange" dataSource="@ViewBag.select" value="Polar" change="seriesChange"  popupHeight="220px"></ejs-dropdownlist>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

    <script>
    @*custom code start*@
        window.onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
        }
        function textRender(args) {
            args.text = args.text.replace('˚C', '');
        }
    @*custom code end*@
        function seriesChange() {
            var chart = document.getElementById('container').ej2_instances[0];
            chart.series[0].type = this.value;
            chart.series[0].animation.enable = true;
            chart.refresh();
        }
    </script>

@*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
@*custom code end*@
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Range Column in ASP.NET Core Chart control. Explore here for more details."/>
                }
@section ActionDescription{
    <p>
        This sample demonstrates polar series with stacking column type. The switching between polar and radar series can be done by using <code>Series Type</code> in property panel.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the stacking column type charts. Stacks the points in the series
        vertically and also you can use <code>stackingGroup</code> property to group the stacking collection based
        on categories. You can use <code>border</code>, <code>fill</code> properties to customize the vertical bar. <code>dataLabel</code>        is used to represent individual data and its value.
    </p>
    <p>
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>

    <p>
        More information on the Polar series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-axis.html#valuetype-valuetype">documentation section</a>.
    </p>
}
@section Title{
                 <title>ASP.NET Core Chart Range Column Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Range Column in ASP.NET Core Chart Control</h1>
            }