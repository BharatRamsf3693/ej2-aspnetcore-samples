@using Syncfusion.EJ2
@section ControlsSection{
    <script src="~/scripts/chart/financial-data.js"></script>
    @{
        var JPEG = "JPEG";
    }
    <div class="control-section col-lg-9" align="center">
        <ejs-chart id="container" load="window.onChartLoad" title="Top 10 Countries Using Solar Power" pointRender="labelRender">
            <e-chart-primaryxaxis valueType="Category" title="Countries" >
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis minimum="0" maximum="40" interval="10" title="Measurements" labelFormat="{value}GW">
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryyaxis>
            <e-chart-tooltipsettings enable="true" header="Style"></e-chart-tooltipsettings>
            <e-chart-legendsettings visible="false">
            </e-chart-legendsettings>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-series-collection>
                <e-series dataSource="ViewBag.dataSource" xName="xValue" yName="yValue" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">

                </e-series>

            </e-series-collection>
        </ejs-chart>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Export Type:</div>
                    </td>
                    <td style="width: 40%;">
                        <ejs-dropdownlist id="data" dataSource="@ViewBag.mode" value="JPEG" popupHeight="220px"></ejs-dropdownlist>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>File Name:</div>
                    </td>
                    <td>
                        <div class="e-float-input" style="margin-top: 0px;">
                            <input type="text" value="Chart" id="fileName" style="margin-left: -10px">
                        </div>
                    </td>
                </tr>
                <tr id="button-control" style="height: 50px" align="center">
                    <td>
                        <ejs-button id="button" content="Export" iconCss="e-icons e-export-icon" cssClass="e-flat" isPrimary=true></ejs-button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
    @*custom code start*@
        window.onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
        }
    @*custom code end*@    
        document.getElementById('button').onclick = () => {
            var chart = document.getElementById('container').ej2_instances[0];
            var dropdown = document.getElementById('data').ej2_instances[0];
            var fileName = ((document.getElementById('fileName'))).value;
            chart.exportModule.export(dropdown.value, fileName);
        };
        @*custom code start*@
        var labelRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = window.fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = window.materialColors[args.point.index % 10];
            }
            else if (selectedTheme === 'highcontrast') {
                args.fill = window.highContrastColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent') {
                 args.fill = window.fluentColors[args.point.index % 10];
            } 
            else if (selectedTheme === 'fluent-dark') {
                 args.fill = window.fluentDarkColors[args.point.index % 10];
            }
            else {
                args.fill = window.bootstrapColors[args.point.index % 10];
            }
        };
        @*custom code end*@
    </script>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }

        .e-export-icon::before {
            content: '\e728';
        }

        .e-view.fabric .e-export-icon::before, .e-view.fabric-dark .e-export-icon::before {
            content: '\e710';
        }

        .e-view.bootstrap4 .e-export-icon::before {
            content: '\e780';
        }

        .e-view.tailwind-dark .e-export-icon::before, .e-view.tailwind .e-export-icon::before {
            content: '\e7bf';
        }

        .e-view.highcontrast .e-export-icon::before {
            content: '\e710';
        }

        .e-view.bootstrap5 .e-export-icon::before, .e-view.bootstrap5-dark .e-export-icon::before {
            content: '\e72e';
        }
    </style>
    @*custom code end*@
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Export in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes the data about average sales comparison of two products by using default area series in the chart.
        Legend in the sample shows the information about the series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the area type charts. Similar to line type series, but the area get closed and filled with series color.
        You can use <code>border</code>, <code>fill</code> properties to customize the area. <code>marker</code> and <code>dataLabel</code> are used to represent individual data and its value.
        Legend is enabled in this example with series type shape.
    </p>
    <br>
    <p>
        More information on the area series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Export in ASP.NET Core Chart Control</h1>
                }