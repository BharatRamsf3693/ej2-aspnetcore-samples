@using Syncfusion.EJ2
@section ControlsSection{
    <script src="~/scripts/chart/financial-data.js"></script>
    @{
        var JPEG = "JPEG";
    }
    <div class="col-lg-9 control-section" align="center">
        <ejs-chart id="container" load="load" title="Top 10 Countries Using Solar Power" pointRender="labelRender">
            <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.Category" interval="1" labelRotation="-45">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis minimum="0" maximum="40" interval="10" title="Measurements (in Gigawatt)">
                <e-majorgridlines width="2"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-series-collection>
                <e-series dataSource="ViewBag.ChartPoints" xName="Country" yName="GigaWatts" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    <e-series-marker>
                        <e-series-datalabel visible="true" position="@Syncfusion.EJ2.Charts.LabelPosition.Top">
                            <e-font fontWeight="600" color="#ffffff" size="9px"></e-font>
                        </e-series-datalabel>
                    </e-series-marker>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 20%">
                        <div>Export Type</div>
                    </td>
                    <td style="width: 80%;">
                        <div style="margin-left: -20px">
                            <ejs-dropdownlist id="data" dataSource="@ViewBag.mode" value="JPEG" popupHeight="220px"></ejs-dropdownlist>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div>File Name</div>
                    </td>
                    <td style="width: 40%;">
                        <div class="e-float-input" style='margin-top:5%;width:115%;margin-left:0%'>
                            <input type="text" value="Charts" id="fileName" style="margin-left: -20px">
                        </div>
                    </td>
                </tr>
                <tr id="button-control" style="height: 50px" align="center">
                    <td>
                        <div style="margin-left:78%;">
                            <ejs-button id="button" content="Export" cssClass="e-control e-btn e-lib e-primary" isPrimary=true></ejs-button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
    @*custom code start*@
        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice?'None':'Trim';
            args.chart.primaryYAxis.labelFormat = ej.base.Browser.isDevice?'{value}':'{value}GW';
            args.chart.series[0].marker.dataLabel.enableRotation = ej.base.Browser.isDevice?'true':'false';
            args.chart.series[0].marker.dataLabel.angle = ej.base.Browser.isDevice?'-90':'0';
        }
    @*custom code end*@    
        document.getElementById('button').onclick = () => {
            var chart = document.getElementById('container').ej2_instances[0];
            var dropdown = document.getElementById('data').ej2_instances[0];
            var fileName = ((document.getElementById('fileName'))).value;
            chart.exportModule.export(dropdown.value, fileName);
        };
        @*custom code start*@
        function labelRender(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = window.fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = window.materialColors[args.point.index % 10];
            }
            else if (selectedTheme === 'highcontrast') {
                args.fill = window.highContrastColors[args.point.index % 10];
            }
            else if (selectedTheme === 'fluent') {
                 args.fill = window.fluentColors[args.point.index % 10];
            } 
            else if (selectedTheme === 'fluent-dark') {
                 args.fill = window.fluentDarkColors[args.point.index % 10];
            }
            else {
                args.fill = window.bootstrapColors[args.point.index % 10];
            }
        };
        @*custom code end*@
    </script>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }

        .e-export-icon::before {
            content: '\e728';
        }

        .e-view.fabric .e-export-icon::before, .e-view.fabric-dark .e-export-icon::before {
            content: '\e710';
        }

        .e-view.bootstrap4 .e-export-icon::before {
            content: '\e780';
        }

        .e-view.tailwind-dark .e-export-icon::before, .e-view.tailwind .e-export-icon::before {
            content: '\e7bf';
        }

        .e-view.highcontrast .e-export-icon::before {
            content: '\e710';
        }

        .e-view.bootstrap5 .e-export-icon::before, .e-view.bootstrap5-dark .e-export-icon::before {
            content: '\e72e';
        }
    </style>
    @*custom code end*@
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Export in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This example demonstrates how to save the chart as a PDF file and in image formats including JPEG, PNG, and SVG.
    </p>
}
@section Description{
    <p>
        By clicking on <b>Export</b> button, you can export the chart to the specific type using export method. To be more precise, define parameters such as the export type and the file name while exporting.
    </p>
    <p>
        More information about the Export can be found in this
                <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-print?cs-save-lang=1&cs-lang=razor#export">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Export in ASP.NET Core Chart Control</h1>
                }