@using Syncfusion.EJ2
@section ControlsSection{
   <div class="control-section">
        <div id="container" align="center">
            <ejs-chart id="lineContainer"  load="window.onChartLoad" title="Stock Price Analysis">
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-chart-primaryxaxis title="Years"
            skeleton="y" valueType="DateTime" edgeLabelPlacement="Shift">
                    <e-majorgridlines width="0"></e-majorgridlines>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis title="Price" labelFormat="${value}" rangePadding="None">
                    <e-linestyle width="0"></e-linestyle>
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-minorticklines width="0"></e-minorticklines>
                </e-chart-primaryyaxis>
                <e-chart-crosshairsettings enable="true" lineType="Vertical" >
                    <e-crosshairsettings-line color="rgba(204,214,235,0.25)" width="20"></e-crosshairsettings-line>
                </e-chart-crosshairsettings>
                <e-chart-tooltipsettings enable="true" shared="true"></e-chart-tooltipsettings>
                <e-series-collection>
                    <e-series name="Product X" xName="x" width=2 yName="y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line"></e-series>
                    <e-series name="Product Y" xName="x" width=2 yName="y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line"></e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
    </div>
    <script>
        window.onChartLoad = function (args) {
            @*custom code start*@
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
            @*custom code end*@
            var series1 = [];
            var series2 = [];
            var point1;
            var point2;
            var value = 80;
            var value1 = 90;
            var i;
            for (i = 1; i < 500; i++) {
                if (Math.random() > .5) {
                    value += Math.random();
                    value1 += Math.random();
                }
                else {
                    value -= Math.random();
                    value1 -= Math.random();
                }
                point1 = { x: new Date(1960, (i + 1), i), y: Math.round(value) };
                point2 = { x: new Date(1960, (i + 1), i), y: Math.round(value1) };
                series1.push(point1);
                series2.push(point2);
            }
            args.chart.series[0].dataSource = series1;
            args.chart.series[1].dataSource = series2;
        }
    </script>
}
@*custom code start*@
@section Scripts {

}

<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Local Data in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates  plotting of local data about stock price analysis of two products for a certain period.
    </p>
}
@section Description{
    <p>
        For fetching data for chart, local data can be used. The <code> <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#datasource-object---datamanager">dataSource</a></code>        property can be assigned either with the array of JavaScript objects or instance of <code>
            <a target="_blank" class="code"
               href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">DataManager</a>
        </code>.
    </p>
    <p>In this demo, the array of JavaScript objects is assigned as the data source to the Chart.</p>
}
@section Title{
                 <title>ASP.NET Core Chart Local Data Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Local Data in ASP.NET Core Chart Control</h1>
            }