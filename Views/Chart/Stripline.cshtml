@using Syncfusion.EJ2
@section ControlsSection{
    @{
        var Vertical = "Vertical";
    }
    <div class="control-section col-md-8" align="center">
        <ejs-chart id="container" title="Weather Report" load="load" >
            <e-chart-primaryxaxis valueType="Category" stripLines="ViewBag.xAxis">
              
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis minimum="10" maximum="40" interval="5" rangePadding="None" labelFormat="{value}Â°C" stripLines="ViewBag.yAxis">
              
            </e-chart-primaryyaxis>
            <e-chart-legendsettings visible="false"></e-chart-legendsettings>
            <e-chart-tooltipsettings enable="true"></e-chart-tooltipsettings>
            <e-series-collection>
                <e-series xName="x" yName="y" type="Line" width="2" dataSource="ViewBag.dataSource" fill="#666666" name="Weather">
                    <e-series-border width="0"></e-series-border>
                    <e-series-marker visible="true" height="10" width="10"></e-series-marker>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>StripLine Type:</div>
                    </td>
                    <td style="width: 40%;">
                        <ejs-dropdownlist id="mode" dataSource="@ViewBag.mode" value="Vertical" change="mode" index="0" popupHeight="220px"></ejs-dropdownlist>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        load = function (args) {
            @*custom code start*@
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            @*custom code end*@
            var xLen = args.chart.primaryXAxis.stripLines.length;
            var yLen = args.chart.primaryYAxis.stripLines.length;
            var fontSize = ej.base.Browser.isDevice ? "14px" : "18px";
            for (var i = 0; i < xLen; i++)
                args.chart.primaryXAxis.stripLines[i].textStyle.size = fontSize;
            for (var j = 0; j < yLen;j++)
                args.chart.primaryYAxis.stripLines[j].textStyle.size = fontSize;
        }
        function mode() {
            var chart = document.getElementById('container').ej2_instances[0];
            var orientation = document.getElementById('mode').value;
            chart.series[0].fill = 'white';
            chart.series[0].marker.fill = 'black';
            chart.series[0].marker.border.color = 'white';
            chart.primaryXAxis.stripLines[5].rotation = 0;
            chart.primaryXAxis.stripLines[6].rotation = 0;
            chart.primaryXAxis.stripLines[7].rotation = 0;
            for (var i = 0; i < 3; i++) {
                chart.primaryYAxis.stripLines[i].visible = false;
            }
            if (orientation === 'Vertical') {
                for (i = 0; i <= 7; i++) {
                    chart.primaryXAxis.stripLines[i].visible = !chart.primaryXAxis.stripLines[i].isSegmented;
                }
            } else if (orientation === 'Horizontal') {
                for (i = 0; i < 3; i++) {
                    chart.primaryYAxis.stripLines[i].visible = true;
                }
                for (i = 0; i <= 7; i++) {
                    chart.primaryXAxis.stripLines[i].visible = false;
                }
            } else {
                for (i = 0; i <= 7; i++) {
                    chart.primaryXAxis.stripLines[i].visible = chart.primaryXAxis.stripLines[i].isSegmented;
                    if (chart.primaryXAxis.stripLines[i].isSegmented) {
                        chart.primaryXAxis.stripLines[i].start = +chart.primaryXAxis.stripLines[i].start;
                    }
                }
                chart.series[0].fill = 'black';
                chart.series[0].marker.fill = 'white';
                chart.series[0].marker.border.color = 'black';
            }
            chart.refresh();

        }
    </script>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }

        #control-container {
            padding: 0px !important;
        }

        #winter stop {
            stop-color: #4ca1af;
        }

            #winter stop[offset="0"] {
                stop-color: #c4e0e5;
            }

            #winter stop[offset="1"] {
                stop-color: #4ca1af;
            }

        #summer stop {
            stop-color: #ffa751;
        }

            #summer stop[offset="0"] {
                stop-color: #ffe259;
            }

            #summer stop[offset="1"] {
                stop-color: #ffa751;
            }

        #spring stop {
            stop-color: #1d976c;
        }

            #spring stop[offset="0"] {
                stop-color: #93f9b9;
            }

            #spring stop[offset="1"] {
                stop-color: #1d976c;
            }

        #autumn stop {
            stop-color: #603813;
        }

            #autumn stop[offset="0"] {
                stop-color: #b29f94;
            }

            #autumn stop[offset="1"] {
                stop-color: #603813;
            }
    </style>
    @*custom code end*@
    <svg style="height: 0">
        <defs>
            <linearGradient id="winter" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
            <linearGradient id="summer" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
            <linearGradient id="spring" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
            <linearGradient id="autumn" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
        </defs>
    </svg>
}
@*custom code start*@
@section Scripts {

}

<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Strip Line in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample highlights certain range in an axis by using stripline feature.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the stripline charts. You can use stripline by enabling the <code>visible</code>
            property. Striplines are rendered in the specified <code>start</code> and <code>end</code> range and you can add more than one stripline for an axis.
        </p>
        <p>
            Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
        </p>

        <p>
            More information on the strip line can be found in this &nbsp;
            <a target="_blank" href="http://ej2.syncfusion.com/react/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
        </p>
    </div>
}
@section Title{
                 <title>ASP.NET Core Chart Strip Line Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Strip Line in ASP.NET Core Chart Control</h1>
            }