@using Syncfusion.EJ2
@section ControlsSection{
<div class="control-section" align="center">
    <ejs-chart id="container" load="load" title="Fruits and Vegetables - Season" pointRender="labelRender">
        <e-chart-chartarea>
            <e-chartarea-border width="0"></e-chartarea-border>
        </e-chart-chartarea>
        <e-chart-legendsettings visible="false">
        </e-chart-legendsettings>
        <e-chart-primaryxaxis isIndexed="true" valueType="@Syncfusion.EJ2.Charts.ValueType.Category" labelRotation="90" interval="1" labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.None">
            <e-majorgridlines width="0"></e-majorgridlines>
            <e-minorgridlines width="0"></e-minorgridlines>
        </e-chart-primaryxaxis>
        <e-chart-primaryyaxis minimum="0" maximum="120" interval="30">
            <e-majorticklines width="0"></e-majorticklines>
            <e-linestyle width="0"></e-linestyle>
            <e-labelstyle color="Transparent"></e-labelstyle>
        </e-chart-primaryyaxis>
        <e-series-collection>
            <e-series dataSource="ViewBag.ChartPoints" xName="Fruits" yName="Sales" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                <e-series-marker>
                    <e-series-datalabel visible="true" position="@Syncfusion.EJ2.Charts.LabelPosition.Outer"></e-series-datalabel>
                </e-series-marker>
            </e-series>
        </e-series-collection>
    </ejs-chart>
</div>
   
    <script>
        function load(args) {
            @*custom code start*@
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            @*custom code end*@
            args.chart.primaryXAxis.border = { type: 'Rectangle', width: 1 };
            args.chart.primaryXAxis.multiLevelLabels = (ej.base.Browser.isDevice ? ([
                {
                    border: { type: 'Rectangle' },
                    categories: [
                        { start: -0.5, end: 2.5, text: 'In Season', },
                        { start: 2.5, end: 5.5, text: 'Out of Season', },
                        { start: 5.5, end: 7.5, text: 'In Season', },
                        { start: 7.5, end: 9.5, text: 'Out of Season', },
                    ]
                }, {
                    border: { type: 'Rectangle' },
                    textStyle: { fontWeight: 'Bold' },
                    categories: [
                        { start: -0.5, end: 5.5, text: 'Fruits', },
                        { start: 5.5, end: 9.5, text: 'Vegetables', },
                    ]
                }]) : [
                    {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 0.5, text: 'Seedless', },
                            { start: 0.5, end: 2.5, text: 'Seeded', },
                            { start: 2.5, end: 3.5, text: 'Seedless', },
                            { start: 3.5, end: 5.5, text: 'Seeded', },
                            { start: 5.5, end: 6.5, text: 'Seedless', },
                            { start: 6.5, end: 7.5, text: 'Seeded', },
                            { start: 7.5, end: 8.5, text: 'Seedless', },
                            { start: 8.5, end: 9.5, text: 'Seeded', }
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        categories: [
                            { start: -0.5, end: 2.5, text: 'In Season', },
                            { start: 2.5, end: 5.5, text: 'Out of Season', },
                            { start: 5.5, end: 7.5, text: 'In Season', },
                            { start: 7.5, end: 9.5, text: 'Out of Season', },
                        ]
                    }, {
                        border: { type: 'Rectangle' },
                        textStyle: { fontWeight: 'Bold' },
                        categories: [
                            { start: -0.5, end: 5.5, text: 'Fruits', },
                            { start: 5.5, end: 9.5, text: 'Vegetables', },
                        ]
                    }])
        }
        function labelRender(args) {
            let pointMaterialColors = ["#00bdae", "#404041", "#357cd2", "#e56590", "#f8b883", "#70ad47", "#dd8abd", "#7f84e8", "#7bb4eb",
                                    "#ea7a57", "#404041", "#00bdae"];
            let pointMaterialDarkColors = ["#9ECB08", "#56AEFF", "#C57AFF", "#61EAA9", "#EBBB3E", "#F45C5C", "#8A77FF", "#63C7FF", "#FF84B0",
                                    "#F7C928"];
            let pointFabricColors = ["#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e",
                                    "#997300", "#4472c4", "#70ad47", "#ffc000", "#ed7d31"];
            let pointBootstrapColors = ["#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e", "#ff6ea6", "#7953ac", "#b99b4f", "#407c92", "#5ea716",
                                    "#b91c52"];
            let pointHighContrastColors = ["#79ECE4", "#E98272", "#DFE6B6", "#C6E773", "#BA98FF", "#FA83C3", "#00C27A", "#43ACEF", "#D681EF",
                                    "#D8BC6E"];
            let pointBootstrap5Colors = ["#262E0B", "#668E1F", "#AF6E10", "#862C0B", "#1F2D50", "#64680B", "#311508", "#4C4C81", "#0C7DA0",
                                    "#862C0B"];
            let pointBootstrap5DarkColors = ["#5ECB9B", "#A860F1", "#EBA844", "#557EF7", "#E9599B", "#BFC529", "#3BC6CF", "#7A68EC", "#74B706",
                                    "#EA6266"];
            let pointFluentColors = ["#614570", "#4C6FB1", "#CC6952", "#3F579A", "#4EA09B", "#6E7A89", "#D4515C", "#E6AF5D", "#639751",
                                    "#9D4D69"];
            let pointFluentDarkColors = ["#8AB113", "#2A72D5", "#43B786", "#584EC6", "#E85F9C", "#6E7A89", "#EA6266", "#EBA844", "#26BC7A",
                                    "#BC4870"];
            let pointTailwindColors = ["#5A61F6", "#65A30D", "#334155", "#14B8A6", "#8B5CF6", "#0369A1", "#F97316", "#9333EA", "#F59E0B",
                                    "#15803D"];
            let pointTailwindDarkColors = ["#8B5CF6", "#22D3EE", "#F87171", "#4ADE80", "#E879F9", "#FCD34D", "#F97316", "#2DD4BF", "#F472B6",
                                    "#10B981"];
            let selectedTheme = location.hash.split('/')[1];
                selectedTheme = selectedTheme ? selectedTheme : 'Material';
                        
                if (selectedTheme==='material-dark')
                {
                      args.border.color = pointMaterialDarkColors[args.point.index % 10];
                }
                else if(selectedTheme==='material')
                {
                      args.fill = pointMaterialColors[args.point.index % 10];
                }
                else if (selectedTheme==='fabric-dark' || selectedTheme==='fabric')
                {
                      args.fill= pointFabricColors[args.point.index % 10];
                }
                else if (selectedTheme==='bootstrap5-dark')
                {
                      args.fill = pointBootstrap5DarkColors[args.point.index % 10];
                }
                else if (selectedTheme==='bootstrap5')
                {
                      args.fill = pointBootstrap5Colors[args.point.index % 10];
                }
                else if (selectedTheme==='fluent-dark')
                {
                      args.fill = pointFluentDarkColors[args.point.index % 10];
                }
                else if (selectedTheme==='fluent')
                {
                      args.fill = pointFluentColors[args.point.index % 10];
                }
                else if (selectedTheme==='bootstrap4' || selectedTheme==='bootstrap')
                {
                      args.fill = pointBootstrapColors[args.point.index % 10];           
                }
                else if (selectedTheme==='tailwind-dark')
                {
                      args.fill = pointTailwindDarkColors[args.point.index % 10];                     
                        
                }
                else if (selectedTheme==='tailwind')
                {                    
                      args.fill = pointTailwindColors[args.point.index % 10];
                }
                else if (selectedTheme==='highcontrast')
                {
                      args.fill = pointHighContrastColors[args.point.index % 10];           
                }
                else
                {
                      args.fill = pointBootstrapColors[args.point.index % 10];           
                }
        }
    </script>
}
@*custom code start*@
@section Scripts {

}

<style>
    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Multilevel labels in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This example shows multilevel labels in the chart axis. We can add layers of labels to the axis using start and end range values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to group axis labels based on ranges by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabels.html">ChartMultiLevelLabels</a>. You can customize the text in each level by using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Border">ChartAxisMultiLevelLabelBorder</a>, and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_TextStyle">ChartAxisMultiLevelLabelTextStyle</a>.
    </p>
    <p>
        Axis labels in each level can be arranged smartly using the <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartMultiLevelLabel.html#Syncfusion_EJ2_Charts_ChartMultiLevelLabel_Overflow">Overflow</a> property. Its values and their behaviors are:
    </p>
    <ul>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields">Trim</a></b> - Trim the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields">Wrap</a></b> - Wrap the label when it intersect.</li>
        <li><b><a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.LabelIntersectAction.html#fields">None</a></b> - Shows all the labels.</li>
    </ul>
    <p>
        More information about the multiple level labels can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/axis-labels#multilevel-labels">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart Multilevel labels Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Multilevel labels in ASP.NET Core Chart Control</h1>
                }