@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div id="container" align='center'>
            <ejs-chart id="lineContainer" enableRtl=true load="window.onChartLoad" axisLabelRender="window.onLabelRender" title="Company Performance">
                <e-chart-tooltipsettings enable="true">
                </e-chart-tooltipsettings>
                <e-chart-primaryxaxis valueType="Double" interval=1 minimum=2015 maximum=2020>
                    <e-majorgridlines width="0"></e-majorgridlines>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis interval=200 minimum=0 maximum=1200 labelFormat="{value}B">
                    <e-linestyle width="0"></e-linestyle>
                </e-chart-primaryyaxis>
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-series-collection>
                    <e-series dataSource="ViewBag.dataSource" xName='Year' yName='Sales' name='Sales' type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    </e-series>
                    <e-series dataSource="ViewBag.dataSource" xName='Year' yName='Expense' name='Expense' type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    </e-series>
                    <e-series dataSource="ViewBag.dataSource" xName='Year' yName='Profit' name='Profit' type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                    </e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
    </div>
    @*custom code start*@
    <script>
        window.onChartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
         window.onLabelRender = function (args) {
            if (args.axis.orientation === 'Horizontal') {
               args.cancel = args.value === 2015 || args.value === 2020;
            }
        }
    </script>
    @*custom code end*@
}
@*custom code start*@
@section Scripts {
}
<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the RTL in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
       This sample visualizes the company performance with default column chart in right-to-left(RTL) direction. The values of the data points are displayed in a tooltip, and the legend in the sample displays information about the series.
    </p>
}
@section Description{
    <p>
        <code>Right-to-left</code>(RTL) is used to render the component from right to left direction and it can be enabled by setting <code>enableRtl</code> property as <b>true</b>. 
        In this demo, you can see <code>axis</code>, <code>data points</code>, <code>tooltip</code> and <code>legend</code> are aligned from right to left direction.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
}
@section Title{
                    <title>ASP.NET Core Chart RTL Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of RTL in ASP.NET Core Chart Control</h1>
                }