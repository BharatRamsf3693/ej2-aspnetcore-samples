@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section">
        <div id="container" align='center'>
            <ejs-chart id="dataEditingContainer" title="Sales prediction of products" load="load">
                <e-chart-tooltipsettings enable="true">
                </e-chart-tooltipsettings>
                <e-chart-chartarea>
                    <e-chartarea-border width="0"></e-chartarea-border>
                </e-chart-chartarea>
                <e-chart-primaryxaxis valueType="Category" minimum=-0.5 maximum=6.5 labelPlacement="OnTicks">
                    <e-majorgridlines width="0"></e-majorgridlines>
                </e-chart-primaryxaxis>
                <e-chart-primaryyaxis title="Sales" labelFormat="{value}%" minimum=0 maximum=100 interval=20
                                      rangePadding="None">
                    <e-majorticklines width="0"></e-majorticklines>
                    <e-minorticklines width="0"></e-minorticklines>
                    <e-linestyle width="0"></e-linestyle>
                </e-chart-primaryyaxis>
                <e-series-collection>
                    <e-series dataSource="ViewBag.dataSource" name="Germany" xName="xValue" width="2" yName="y" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Column">
                        <e-series-marker visible="true" width="10" height="10">
                        </e-series-marker>
                    </e-series>
                    <e-series dataSource="ViewBag.dataSource" xName="xValue" width="2" yName="y1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line" name="London">
                        <e-series-marker visible="true" width="10" height="10">
                        </e-series-marker>
                    </e-series>
                </e-series-collection>
            </ejs-chart>
        </div>
    </div>

    <script>

        @* custom code start *@
        function load(args) {
            var indexedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (indexedTheme.charAt(0).toUpperCase() + indexedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast'));
            args.chart.series[0].dragSettings.enable = true;
            args.chart.series[1].dragSettings.enable = true;
        }
        @* custom code end *@
    </script>


}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Data Editing in ASP.NET Core Chart control. Explore here for more details."/>
                }

@*custom code end*@

@section ActionDescription{
    <p>
        This sample describes data editing feature in chart. Drag and drop the points to change the <code>data values dynamically</code>
    </p>
}

@section Description{
    <div id="description">
        <p>
            The draggable-points allows data to be moved around the chart. In addition to this, the module fires events such as dragStart, drag and dragComplete.
        </p>
        <p>
            Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
        </p>

    </div>

}
@section Title{
                 <title>ASP.NET Core Chart Data Editing Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Data Editing in ASP.NET Core Chart Control</h1>
            }