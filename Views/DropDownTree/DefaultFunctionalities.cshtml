@using Syncfusion.EJ2
@{
    List<Parent> Parent = new List<Parent>();
    List<Child> Child1 = new List<Child>();
    List<SubChildren> SubChildren1 = new List<SubChildren>();
    Parent.Add(new Parent
    {
        nodeId = "01",
        nodeText = "Local Disk (C:)",
        expanded = true,
        child = Child1,
    });
    Child1.Add(new Child { nodeId = "01-01", nodeText = "Program Files", child = SubChildren1 });
    SubChildren1.Add(new SubChildren { nodeId = "01-01-01", nodeText = "Windows NT" });
    SubChildren1.Add(new SubChildren { nodeId = "01-01-02", nodeText = "Windows Mail" });
    SubChildren1.Add(new SubChildren { nodeId = "01-01-03", nodeText = "Windows Photo Viewer" });
    List<SubChildren> SubChildren2 = new List<SubChildren>();
    Child1.Add(new Child { nodeId = "01-02", nodeText = "Users", expanded = true, child = SubChildren2 });
    SubChildren2.Add(new SubChildren { nodeId = "01-02-01", nodeText = "Smith" });
    SubChildren2.Add(new SubChildren { nodeId = "01-02-02", nodeText = "Public" });
    SubChildren2.Add(new SubChildren { nodeId = "01-02-03", nodeText = "Admin" });
    List<SubChildren> SubChildren3 = new List<SubChildren>();
    Child1.Add(new Child { nodeId = "01-03", nodeText = "Windows", child = SubChildren3 });
    SubChildren3.Add(new SubChildren { nodeId = "01-03-01", nodeText = "Boot" });
    SubChildren3.Add(new SubChildren { nodeId = "01-03-02", nodeText = "FileManager" });
    SubChildren3.Add(new SubChildren { nodeId = "01-03-03", nodeText = "System32" });
    List<Child> Child2 = new List<Child>();
    Parent.Add(new Parent
    {
        nodeId = "02",
        nodeText = "Local Disk (D:)",
        child = Child2,
    });
    List<SubChildren> SubChildren4 = new List<SubChildren>();
    Child2.Add(new Child { nodeId = "02-01", nodeText = "Personals", child = SubChildren4 });
    SubChildren4.Add(new SubChildren { nodeId = "02-01-01", nodeText = "My photo.png" });
    SubChildren4.Add(new SubChildren { nodeId = "02-01-02", nodeText = "Rental document.docx" });
    SubChildren4.Add(new SubChildren { nodeId = "02-01-03", nodeText = "Pay slip.pdf" });
    List<SubChildren> SubChildren5 = new List<SubChildren>();
    Child2.Add(new Child { nodeId = "02-02", nodeText = "Projects", child = SubChildren5 });
    SubChildren5.Add(new SubChildren { nodeId = "02-02-01", nodeText = "ASP Application " });
    SubChildren5.Add(new SubChildren { nodeId = "02-02-02", nodeText = "TypeScript Application" });
    SubChildren5.Add(new SubChildren { nodeId = "02-02-03", nodeText = "React Application" });

    List<SubChildren> SubChildren6 = new List<SubChildren>();
    Child2.Add(new Child { nodeId = "02-02", nodeText = "Office", child = SubChildren6 });
    SubChildren6.Add(new SubChildren { nodeId = "02-03-01", nodeText = "Work details.docx " });
    SubChildren6.Add(new SubChildren { nodeId = "02-03-02", nodeText = "Weekly report.docx" });
    SubChildren6.Add(new SubChildren { nodeId = "02-03-03", nodeText = "Wish list.csv" });
    List<Child> Child3 = new List<Child>();
    Parent.Add(new Parent
    {
        nodeId = "03",
        nodeText = "Local Disk (E:)",
        child = Child3,
    });

    List<SubChildren> SubChildren7 = new List<SubChildren>();
    Child3.Add(new Child { nodeId = "03-01", nodeText = "Pictures", child = SubChildren7 });
    SubChildren7.Add(new SubChildren { nodeId = "03-01-01", nodeText = "Wind.jpg " });
    SubChildren7.Add(new SubChildren { nodeId = "03-01-02", nodeText = "Stone.jpg" });
    SubChildren7.Add(new SubChildren { nodeId = "03-01-03", nodeText = "Home.jpg" });

    List<SubChildren> SubChildren8 = new List<SubChildren>();
    Child3.Add(new Child { nodeId = "03-02", nodeText = "Documents", icon = "docx", child = SubChildren8 });
    SubChildren8.Add(new SubChildren { nodeId = "03-02-01", nodeText = "Environment Pollution.docx " });
    SubChildren8.Add(new SubChildren { nodeId = "03-02-02", nodeText = "Global Warming.ppt" });
    SubChildren8.Add(new SubChildren { nodeId = "03-02-03", nodeText = "Social Network.pdf" });

    List<SubChildren> SubChildren9 = new List<SubChildren>();
    Child3.Add(new Child { nodeId = "03-03", nodeText = "Study Materials", child = SubChildren9 });
    SubChildren9.Add(new SubChildren { nodeId = "03-03-01", nodeText = "UI-Guide.pdf" });
    SubChildren9.Add(new SubChildren { nodeId = "03-03-02", nodeText = "Tutorials.zip" });
    SubChildren9.Add(new SubChildren { nodeId = "03-03-03", nodeText = "TypeScript.7z" });

    char[] value = { 'c', 'h', 'i', 'l', 'd' };
    string Child = new string(value);
}
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper" style='padding-top:75px;'>
            <ejs-dropdowntree id="tree" popupHeight="200px" placeholder="Select a file or folder" change="valueChange" changeOnBlur="false">
                <e-dropdowntree-fields child="Child" dataSource="Parent" value="nodeId" parentValue="pid" text="nodeText" hasChildren="hasChild" expanded="expanded"></e-dropdowntree-fields>
            </ejs-dropdowntree>
        </div>
    </div>
    <div class="col-lg-4 property-section dropdowntree-default">
        <table id="property" title="Properties" style="width: 100%; margin:10px">
            <tr>
                <td class="left-side">Value</td>
                <td>:<span id='value' class="right-side"></span></td>
            </tr>
            <tr>
                <td class="left-side">Text</td>
                <td>:<span id='text' class="right-side"></span></td>
            </tr>
        </table>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET Core Dropdown Tree control. Explore here for more details."/>
                }
@section ActionDescription{
    <p>
        This sample explains you about the default functionalities of the Dropdown Tree control. Click the Dropdown Tree
        element, and then select an item from the hierarchical structure <code>options</code> list.
        The selected item's <code>value</code> and <code>text</code> property values will be shown the in
        property panel.
    </p>
}

@section Description{
    <p>
        The <code>Dropdown Tree</code> control contains a hierarchical structure list of predefined values from that the
        user can choose a
        single
        value.
    </p>
    <p>
        The default sample explains you about  the use of Dropdown Tree that allows the end-users to select an item from the
        hierarchical structure
        <code>options</code> list. The selected item's <code>value</code> and <code>text</code> property values will be
        displayed in the property
        panel.
    </p>
}

<script type="text/javascript">
    function valueChange() {
        var ddTreeObj = document.getElementById("tree").ej2_instances[0];
        var value = document.getElementById('value');
        var text = document.getElementById('text');
        // update the text and value property values in property panel based on selected item in DropDownTree
        value.innerHTML = ddTreeObj.value;
        text.innerHTML = ddTreeObj.text;
    }
</script>

@*custom code start*@
<style>
    .control-wrapper {
        margin: 0 auto;
        width: 250px;
    }

    .property-section .right-side {
        padding-left: 10px;
    }

    .dropdowntree-default.property-section .left-side {
        padding: 5px;
        width: 25%
    }
</style>
@*custom code end*@

@section Title{
                    <title>ASP.NET Core Dropdown Tree Default Functionalities Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET Core Dropdown Tree Control</h1>
                }