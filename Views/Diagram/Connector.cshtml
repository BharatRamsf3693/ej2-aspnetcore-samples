@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper" style="width:100%;background: white">
            <ejs-diagram id="container" selectedItems="@ViewBag.selectedItems" width="100%" height="580px"  getNodeDefaults="@ViewBag.getNodeDefaults" getConnectorDefaults="@ViewBag.getConnectorDefaults" nodes="@ViewBag.nodes" connectors="@ViewBag.connectors" setNodeTemplate="@ViewBag.setNodeTemplate">
                <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
                <e-diagram-layout type="HierarchicalTree" orientation="LeftToRight" verticalSpacing="75" margin="new Syncfusion.EJ2.Diagrams.DiagramMargin() { Left = 40, Right = 0, Bottom = 0, Top = 0 }"></e-diagram-layout>
            </ejs-diagram>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row property-panel-content" id="appearance">
            <div class="row row-header">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="straightConnector" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_1.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="orthogonalConnector" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_2.png")'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="bezierConnector" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_3.png")'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="straightConnectorWithStroke" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_4.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="orthogonalConnectorWithStroke" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_5.png")'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="bezierConnectorWithStroke" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_6.png")'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="straightConnectorWithDasharray" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_7.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="orthogonalConnectorWithDasharray" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_8.png")'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="bezierConnectorWithDasharray" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_9.png")'); margin-left: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="cornerRadious" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_10.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="sourceDecorator" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_11.png")'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="sourceDecoratorWithDasharray" style="background-image: url('@Url.Content("~/images/Diagram/connector/Connectors_12.png")'); margin-left: 3px">
                </div>
            </div>
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">
            <div class="row" style="padding-top: 8px">
                <ejs-checkbox id="checked" checked="false" change="checkBoxChanged" label="Lock"></ejs-checkbox>
            </div>
        </div>
    </div>
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 45px;
            width: calc((100% - 13px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 13px;
            font-weight: 500;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
        }

        .e-selected-style {
            border-color: #6c6c6c;
            border-width: 2px;
        }

        #container {
            display: block;
        }

        .row {
            display: block;
        }
    </style>
    <script>

        function getNodeDefaults(obj, diagram) {
            if (obj.id !== 'node1') {
                //Set ports
                obj.ports = getPorts(obj);
            }
            if (obj.id !== 'node6') {
                obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };
                obj.width = 80;
                obj.style.strokeWidth = 2;
                obj.style.strokeColor = '#6F409F';
                obj.height = 35;
                obj.maxWidth = 80;
                obj.maxHeight = 35;
            }
        }

        function getConnectorDefaults(obj, diagram) {
            obj.type = 'Bezier';
            obj.style.strokeColor = '#6f409f';
            obj.style.strokeWidth = 2;
            obj.targetDecorator = {
                style: {
                    strokeColor: '#6f409f',
                    fill: '#6f409f',
                }
            }
        }           

        function setNodeTemplate(obj, diagram) {
            if (obj.id === 'node6') {
                obj.offsetY = 290;
                obj.offsetX = 550;
                var canvas = new ej.diagrams.StackPanel();
                canvas.id = ej.diagrams.randomId();
                canvas.children = [];
                canvas.style.strokeWidth = 0;
                canvas.style.fill = '#e6e0eb';
                canvas.children.push(getTextElement('Events', '#a6a1e0'));
                canvas.children.push(getTextElement('Emails', '#db8ec9'));
                canvas.children.push(getTextElement('Calls', '#db8ec9'));
                canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));
                return canvas;
            }
            return null;
        }

        function getTextElement(text, color) {
            let textElement = new ej.diagrams.TextElement();
            textElement.id = ej.diagrams.randomId();
            textElement.width = 80;
            textElement.height = 35;
            textElement.content = text;
            textElement.style.fill = '#6f409f';
            textElement.style.color = 'white';
            textElement.style.strokeColor = '#6f409f';
            textElement.cornerRadius = 5;
            textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };
            textElement.relativeMode = 'Object';
            return textElement;
        }

        function getPorts(obj) {
            if (obj.id === 'node2') {
                var node2Ports = [
                    { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node2Ports;
            } else if (obj.id === 'node6') {
                let node6Ports = [
                    { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: ej.diagrams.PortVisibility.Hidden }
                ];
                return node6Ports;
            } else {
                let ports = [
                    { id: 'portin', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                    { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },
                ];
                return ports;
            }
        }

        function checkBoxChanged(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.nodes.length; i++) {
                var node = diagram.nodes[i];
                if (args.checked) {
                    node.constraints &= ~(ej.diagrams.NodeConstraints.Resize | ej.diagrams.NodeConstraints.Rotate | ej.diagrams.NodeConstraints.Drag);
                    node.constraints |= ej.diagrams.NodeConstraints.ReadOnly;
                }
                else {
                    node.constraints |= ej.diagrams.NodeConstraints.Default & ~(ej.diagrams.NodeConstraints.ReadOnly);
                }
                diagram.dataBind();
            }
            for (var i = 0; i < diagram.connectors.length; i++) {
                var connector = diagram.connectors[i];
                if (args.checked) {
                    connector.constraints &= ~(ej.diagrams.ConnectorConstraints.DragSourceEnd
                        | ej.diagrams.ConnectorConstraints.DragTargetEnd | ej.diagrams.ConnectorConstraints.DragSegmentThumb);
                    connector.constraints |= ej.diagrams.ConnectorConstraints.ReadOnly;
                } else {
                    connector.constraints |= ej.diagrams.ConnectorConstraints.Default & ~(ej.diagrams.ConnectorConstraints.ReadOnly);
                }
                diagram.dataBind();
            }
        }

        document.getElementById('appearance').onclick = function (args) {
            let target = args.target;
            var diagram = document.getElementById("container").ej2_instances[0];
            @*custom code start*@
            let selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            @*custom code end*@
            if (target.className === 'image-pattern-style') {
                switch (target.id) {
                    case 'straightConnector':
                        applyConnectorStyle(false, false, false, 'Straight', target, 1);
                        break;
                    case 'orthogonalConnector':
                        applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);
                        break;
                    case 'bezierConnector':
                        applyConnectorStyle(false, false, false, 'Bezier', target, 1);
                        break;
                    case 'straightConnectorWithStroke':
                        applyConnectorStyle(false, false, false, 'Straight');
                        break;
                    case 'orthogonalConnectorWithStroke':
                        applyConnectorStyle(false, false, false, 'Orthogonal');
                        break;
                    case 'bezierConnectorWithStroke':
                        applyConnectorStyle(false, false, false, 'Bezier');
                        break;
                    case 'straightConnectorWithDasharray':
                        applyConnectorStyle(true, false, false, 'Straight');
                        break;
                    case 'orthogonalConnectorWithDasharray':
                        applyConnectorStyle(true, false, false, 'Orthogonal');
                        break;
                    case 'bezierConnectorWithDasharray':
                        applyConnectorStyle(true, false, false, 'Bezier');
                        break;
                    case 'cornerRadious':
                        applyConnectorStyle(false, false, true, 'Orthogonal');
                        break;
                    case 'sourceDecorator':
                        applyConnectorStyle(false, true, false, 'Straight');
                        break;
                    case 'sourceDecoratorWithDasharray':
                        applyConnectorStyle(true, true, false, 'Straight');
                        break;
                }
                @*custom code start*@
                target.classList.add('e-selected-style');
                @*custom code end*@
            }
        };
        function applyConnectorStyle(dashedLine, sourceDec, isRounded, type, target, strokeWidth) {
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var i = 0; i < diagram.connectors.length; i++) {
                var connector = diagram.connectors[i];
                connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;
                connector.type = type;
                connector.cornerRadius = isRounded ? 5 : 0;
                connector.style.strokeDashArray = dashedLine ? '5,5' : '';
                if (sourceDec) {
                    connector.sourceDecorator = {
                        style: {
                            strokeColor: '#6f409f',
                            fill: '#6f409f', strokeWidth: 2
                        }, shape: 'Circle'
                    };
                } else {
                    connector.sourceDecorator = { shape: 'None' };
                }
                connector.targetDecorator = {
                    style: {
                        strokeColor: '#6f409f',
                        fill: '#6f409f', strokeWidth: 2
                    }, shape: 'Arrow'
                };
                diagram.dataBind();
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the data flow in a marketing process using predefined shapes and connectors. Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Connectors in ASP.NET Core Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
    In this example, you can see how to add connectors to connect the shapes and how to customize the appearance of the connectors.
    You can use the <code>style</code> property of the connector to customize its stroke style. You can use the
    <code>cornerRadius</code> property to add connectors with rounded corners.
</p>

    <p>
        Additionally, you can see how to lock the connectors to disable editing. The
        <code>constraints</code> property of connector enables/disables editing.
        In this example, the shapes are automatically arranged using hierarchical tree layout.

    </p>
<p style="font-weight: 500">Injecting Module</p>
    <p> Diagram component's features are segregated into individual feature-wise modules. To automatically arrange the shapes, we need to Inject <code>HierarchicalTree</code> module using <code>Diagram.Inject(HierarchicalTree)</code> method.</p>
}
@section Title{
                    <title>ASP.NET Core Diagram Connectors Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Connectors in ASP.NET Core Diagram Control</h1>
                }