@section ControlsSection{
@{
    var labelFont = new Syncfusion.EJ2.LinearGauge.LinearGaugeFont { FontFamily = "Segoe UI", Opacity = 1 };
}
<div class="col-md-8 control-section">
    <div class="content-wrapper">
        <ejs-lineargauge id="linear" load="gaugeLoad" orientation="Horizontal">
            <e-lineargauge-axes>
                <e-lineargauge-axis maximum="115">
                    <e-axis-line color="#9E9E9E"></e-axis-line>
                    <e-axis-labelstyle offset="48" font="labelFont"></e-axis-labelstyle>
                </e-lineargauge-axis>
            </e-lineargauge-axes>
        </ejs-lineargauge>
    </div>
</div>
<div class="col-md-4 property-section">
    <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
		<tbody>
            <tr>
                <td>
                    <div>Axis Minimum</div>
                </td>
                <td>
                    <div>
                        <input type="range" step="5" id="min" value="0" min="0" max="115" style="width: 70%;">
                    </div>
                </td>
                <td style="width: 10%;padding-top: 10px;text-align: center;">
                    <span id='minValue' style="margin-left: -30px;">0</span>
                </td>
            </tr>
            <tr>
                <td>
                    <div>Axis Maximum</div>
                </td>
                <td>
                    <div>
                        <input type="range" step="5" id="max" value="115" min="0" max="115" style="width: 70%;">
                    </div>
                </td>
                <td style="width: 10%;padding-top: 10px;text-align: center;">
                    <span id='maxValue' style="margin-left: -30px;">115</span>
                </td>
            </tr>
			<tr>
				<td>
					<div>Axis Inversed</div>
				</td>
				<td>
					<div>
						<input type="checkbox" id="axisInversed">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>Axis Opposed</div>
				</td>
				<td>
					<div>
						<input type="checkbox" id="opposed">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>Show Last Label</div>
				</td>
				<td>
					<div>
						<input type="checkbox" id="lastlabel">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>Label Format</div>
				</td>
				<td>
					<div class="e-float-input" style="margin-top: 0px;">
						<input type="text" value="{value}" id="format" class="form-control" style="width: 100%">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>Pointer Type</div>
				</td>
				<td>
					<div>
						<select name="selectIndex" autocomplete="off" id="pointerType" class="form-control" style="width:100%">
							<option value="Marker">Marker</option>
							<option value="Bar">Bar</option>
						</select>
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div>Marker Placement</div>
				</td>
				<td>
					<div>
						<select name="selectIndex" autocomplete="off" id="pointerPlace" class="form-control" style="width:100%">
							<option value="Far">Far</option>
							<option value="Near">Near</option>
							<option value="Center">Center</option>
						</select>
					</div>
				</td>
			</tr>
		</tbody>
    </table>
</div>
}

<script>
    var count, gauge;
    window.gaugeLoad = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
        if (window.gaugeLoaded) return;
        window.gaugeLoaded = true;
        gauge = args.gauge;
        args.gauge.orientation = "Horizontal";
        var axis = args.gauge.axes[0];

        axis.pointers = [{
            value: 20,
            height: 15,
            width: 15,
            color: '#757575',
            offset: 30
        }];
        axis.majorTicks = {
            color: '#9E9E9E',
            interval: 20
        };
        axis.minorTicks = {
            color: '#9E9E9E',
            interval: 2
        };


        args.gauge.orientation = 'Horizontal';

        var annotation = args.gauge.annotations[0];

        annotation.content = '<div id="pointer" style="width:70px"><h1 style="font-size:14px; font-family:Segoe UI"' +
            '>${axes[0].pointers[0].currentValue} MPH</h1></div>';
        annotation.axisIndex = 0;
        annotation.axisValue = 20;
        annotation.y = 60;
        annotation.x = 10;
        annotation.zIndex = '1';
        
    }
    window.addEventListener('load', function () {
        document.getElementById('opposed').onchange = function (sender) {
            var ele = document.getElementById('opposed');
            gauge.axes[0].opposedPosition = ele.checked;
            if (ele.checked) {
                gauge.axes[0].pointers[0].placement = 'Near';
                gauge.axes[0].pointers[0].markerType = 'Triangle';
                gauge.axes[0].pointers[0].offset = -20;
                gauge.axes[0].labelStyle.offset = 0;
                gauge.annotations[0].x = 10;
                gauge.annotations[0].y = -60;
            }
            else {
                gauge.axes[0].pointers[0].placement = 'Far';
                gauge.axes[0].pointers[0].offset = 0;
                gauge.axes[0].pointers[0].offset = 30;
                gauge.axes[0].pointers[0].markerType = 'InvertedTriangle';
                gauge.axes[0].labelStyle.offset = 38;
                gauge.annotations[0].x = 10;
                gauge.annotations[0].y = 60;
            }
            gauge.refresh();
        };
        document.getElementById('axisInversed').onchange = function (sender) {
            var ele = document.getElementById('axisInversed');
            gauge.axes[0].isInversed = ele.checked;
            gauge.refresh();
        };
		document.getElementById('lastlabel').onchange = function (sender) {
			var ele = document.getElementById('lastlabel');
			gauge.axes[0].showLastLabel = ele.checked;
			gauge.refresh();
		};
        document.getElementById('min').ontouchmove = document.getElementById('min').onpointermove =
            document.getElementById('min').onchange = function () {
                var min = document.getElementById('min');
                var max = document.getElementById('max');
                gauge.axes[0].minimum = parseInt(min.value, 10);
                gauge.axes[0].maximum = parseInt(max.value, 10);
            document.getElementById('minValue').innerHTML = min.value.toString();
                gauge.refresh();
                gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;
                gauge.refresh();
            };
        document.getElementById('max').ontouchmove = document.getElementById('max').onpointermove =
            document.getElementById('max').onchange = function () {
                var min = document.getElementById('min');
                var max = document.getElementById('max');
                gauge.axes[0].maximum = parseInt(max.value, 10);
                gauge.axes[0].minimum = parseInt(min.value, 10);
            document.getElementById('maxValue').innerHTML = max.value.toString();
                gauge.refresh();
                gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;
                gauge.refresh();
            };
        document.getElementById('format').onchange = function () {
            var ele = document.getElementById('format');
            gauge.axes[0].labelStyle.format = ele.value.indexOf('{value}') > -1 ? ele.value : gauge.axes[0].labelStyle.format;
            gauge.refresh();
        };
        var pointerPlace = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: '100%',
            change: function () {
                gauge.axes[0].pointers[0].placement = pointerPlace.value;
                gauge.refresh();
            }
        });
        pointerPlace.appendTo('#pointerPlace');
        var pointerType = new ej.dropdowns.DropDownList({
            index: 0,
            placeholder: 'Select Range Bar Color',
            width: '100%',
            change: function () {
                gauge.axes[0].pointers[0].type = pointerType.value;
                pointerPlace.enabled = (pointerType.value === 'Marker');
                gauge.refresh();
            }
        });
        pointerType.appendTo('#pointerType');
    });
    function getRandomArbitrary(min, max) {
        return Math.random() * (max - min) + min;
    }
</script>



<style>
    #control-container {
        padding: 0px !important;
    }

    tr {
        height: 50px;
    }
</style>
@section Meta{
                    <meta name="description" content="This example demonstrates the Axes and Pointers in ASP.NET Core LinearGauge control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates the axis and pointers feature in the linear gauge. Axis and pointers can be customized by using options available in the panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to customize the axes and pointers. Use
            <code>format</code> of labelStyle property to customize the axis labels and use
            <code>type</code>,
            <code>markerType</code> and
            <code>placement</code> properties to customize the pointers in linear gauge.
        </p>
        <br>
        <p>
            More information about axes can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation section</a>.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core LinearGauge Axes and Pointers Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Axes and Pointers in ASP.NET Core LinearGauge Control</h1>
                }